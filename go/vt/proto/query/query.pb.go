// Code generated by protoc-gen-go. DO NOT EDIT.
// source: query.proto

package query // import "vitess.io/vitess/go/vt/proto/query"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import topodata "vitess.io/vitess/go/vt/proto/topodata"
import vtrpc "vitess.io/vitess/go/vt/proto/vtrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Flags sent from the MySQL C API
type MySqlFlag int32

const (
	MySqlFlag_EMPTY                 MySqlFlag = 0
	MySqlFlag_NOT_NULL_FLAG         MySqlFlag = 1
	MySqlFlag_PRI_KEY_FLAG          MySqlFlag = 2
	MySqlFlag_UNIQUE_KEY_FLAG       MySqlFlag = 4
	MySqlFlag_MULTIPLE_KEY_FLAG     MySqlFlag = 8
	MySqlFlag_BLOB_FLAG             MySqlFlag = 16
	MySqlFlag_UNSIGNED_FLAG         MySqlFlag = 32
	MySqlFlag_ZEROFILL_FLAG         MySqlFlag = 64
	MySqlFlag_BINARY_FLAG           MySqlFlag = 128
	MySqlFlag_ENUM_FLAG             MySqlFlag = 256
	MySqlFlag_AUTO_INCREMENT_FLAG   MySqlFlag = 512
	MySqlFlag_TIMESTAMP_FLAG        MySqlFlag = 1024
	MySqlFlag_SET_FLAG              MySqlFlag = 2048
	MySqlFlag_NO_DEFAULT_VALUE_FLAG MySqlFlag = 4096
	MySqlFlag_ON_UPDATE_NOW_FLAG    MySqlFlag = 8192
	MySqlFlag_NUM_FLAG              MySqlFlag = 32768
	MySqlFlag_PART_KEY_FLAG         MySqlFlag = 16384
	MySqlFlag_GROUP_FLAG            MySqlFlag = 32768
	MySqlFlag_UNIQUE_FLAG           MySqlFlag = 65536
	MySqlFlag_BINCMP_FLAG           MySqlFlag = 131072
)

var MySqlFlag_name = map[int32]string{
	0:     "EMPTY",
	1:     "NOT_NULL_FLAG",
	2:     "PRI_KEY_FLAG",
	4:     "UNIQUE_KEY_FLAG",
	8:     "MULTIPLE_KEY_FLAG",
	16:    "BLOB_FLAG",
	32:    "UNSIGNED_FLAG",
	64:    "ZEROFILL_FLAG",
	128:   "BINARY_FLAG",
	256:   "ENUM_FLAG",
	512:   "AUTO_INCREMENT_FLAG",
	1024:  "TIMESTAMP_FLAG",
	2048:  "SET_FLAG",
	4096:  "NO_DEFAULT_VALUE_FLAG",
	8192:  "ON_UPDATE_NOW_FLAG",
	32768: "NUM_FLAG",
	16384: "PART_KEY_FLAG",
	// Duplicate value: 32768: "GROUP_FLAG",
	65536:  "UNIQUE_FLAG",
	131072: "BINCMP_FLAG",
}
var MySqlFlag_value = map[string]int32{
	"EMPTY":                 0,
	"NOT_NULL_FLAG":         1,
	"PRI_KEY_FLAG":          2,
	"UNIQUE_KEY_FLAG":       4,
	"MULTIPLE_KEY_FLAG":     8,
	"BLOB_FLAG":             16,
	"UNSIGNED_FLAG":         32,
	"ZEROFILL_FLAG":         64,
	"BINARY_FLAG":           128,
	"ENUM_FLAG":             256,
	"AUTO_INCREMENT_FLAG":   512,
	"TIMESTAMP_FLAG":        1024,
	"SET_FLAG":              2048,
	"NO_DEFAULT_VALUE_FLAG": 4096,
	"ON_UPDATE_NOW_FLAG":    8192,
	"NUM_FLAG":              32768,
	"PART_KEY_FLAG":         16384,
	"GROUP_FLAG":            32768,
	"UNIQUE_FLAG":           65536,
	"BINCMP_FLAG":           131072,
}

func (x MySqlFlag) String() string {
	return proto.EnumName(MySqlFlag_name, int32(x))
}
func (MySqlFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{0}
}

// Flag allows us to qualify types by their common properties.
type Flag int32

const (
	Flag_NONE       Flag = 0
	Flag_ISINTEGRAL Flag = 256
	Flag_ISUNSIGNED Flag = 512
	Flag_ISFLOAT    Flag = 1024
	Flag_ISQUOTED   Flag = 2048
	Flag_ISTEXT     Flag = 4096
	Flag_ISBINARY   Flag = 8192
)

var Flag_name = map[int32]string{
	0:    "NONE",
	256:  "ISINTEGRAL",
	512:  "ISUNSIGNED",
	1024: "ISFLOAT",
	2048: "ISQUOTED",
	4096: "ISTEXT",
	8192: "ISBINARY",
}
var Flag_value = map[string]int32{
	"NONE":       0,
	"ISINTEGRAL": 256,
	"ISUNSIGNED": 512,
	"ISFLOAT":    1024,
	"ISQUOTED":   2048,
	"ISTEXT":     4096,
	"ISBINARY":   8192,
}

func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}
func (Flag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{1}
}

// Type defines the various supported data types in bind vars
// and query results.
type Type int32

const (
	// NULL_TYPE specifies a NULL type.
	Type_NULL_TYPE Type = 0
	// INT8 specifies a TINYINT type.
	// Properties: 1, IsNumber.
	Type_INT8 Type = 257
	// UINT8 specifies a TINYINT UNSIGNED type.
	// Properties: 2, IsNumber, IsUnsigned.
	Type_UINT8 Type = 770
	// INT16 specifies a SMALLINT type.
	// Properties: 3, IsNumber.
	Type_INT16 Type = 259
	// UINT16 specifies a SMALLINT UNSIGNED type.
	// Properties: 4, IsNumber, IsUnsigned.
	Type_UINT16 Type = 772
	// INT24 specifies a MEDIUMINT type.
	// Properties: 5, IsNumber.
	Type_INT24 Type = 261
	// UINT24 specifies a MEDIUMINT UNSIGNED type.
	// Properties: 6, IsNumber, IsUnsigned.
	Type_UINT24 Type = 774
	// INT32 specifies a INTEGER type.
	// Properties: 7, IsNumber.
	Type_INT32 Type = 263
	// UINT32 specifies a INTEGER UNSIGNED type.
	// Properties: 8, IsNumber, IsUnsigned.
	Type_UINT32 Type = 776
	// INT64 specifies a BIGINT type.
	// Properties: 9, IsNumber.
	Type_INT64 Type = 265
	// UINT64 specifies a BIGINT UNSIGNED type.
	// Properties: 10, IsNumber, IsUnsigned.
	Type_UINT64 Type = 778
	// FLOAT32 specifies a FLOAT type.
	// Properties: 11, IsFloat.
	Type_FLOAT32 Type = 1035
	// FLOAT64 specifies a DOUBLE or REAL type.
	// Properties: 12, IsFloat.
	Type_FLOAT64 Type = 1036
	// TIMESTAMP specifies a TIMESTAMP type.
	// Properties: 13, IsQuoted.
	Type_TIMESTAMP Type = 2061
	// DATE specifies a DATE type.
	// Properties: 14, IsQuoted.
	Type_DATE Type = 2062
	// TIME specifies a TIME type.
	// Properties: 15, IsQuoted.
	Type_TIME Type = 2063
	// DATETIME specifies a DATETIME type.
	// Properties: 16, IsQuoted.
	Type_DATETIME Type = 2064
	// YEAR specifies a YEAR type.
	// Properties: 17, IsNumber, IsUnsigned.
	Type_YEAR Type = 785
	// DECIMAL specifies a DECIMAL or NUMERIC type.
	// Properties: 18, None.
	Type_DECIMAL Type = 18
	// TEXT specifies a TEXT type.
	// Properties: 19, IsQuoted, IsText.
	Type_TEXT Type = 6163
	// BLOB specifies a BLOB type.
	// Properties: 20, IsQuoted, IsBinary.
	Type_BLOB Type = 10260
	// VARCHAR specifies a VARCHAR type.
	// Properties: 21, IsQuoted, IsText.
	Type_VARCHAR Type = 6165
	// VARBINARY specifies a VARBINARY type.
	// Properties: 22, IsQuoted, IsBinary.
	Type_VARBINARY Type = 10262
	// CHAR specifies a CHAR type.
	// Properties: 23, IsQuoted, IsText.
	Type_CHAR Type = 6167
	// BINARY specifies a BINARY type.
	// Properties: 24, IsQuoted, IsBinary.
	Type_BINARY Type = 10264
	// BIT specifies a BIT type.
	// Properties: 25, IsQuoted.
	Type_BIT Type = 2073
	// ENUM specifies an ENUM type.
	// Properties: 26, IsQuoted.
	Type_ENUM Type = 2074
	// SET specifies a SET type.
	// Properties: 27, IsQuoted.
	Type_SET Type = 2075
	// TUPLE specifies a a tuple. This cannot
	// be returned in a QueryResult, but it can
	// be sent as a bind var.
	// Properties: 28, None.
	Type_TUPLE Type = 28
	// GEOMETRY specifies a GEOMETRY type.
	// Properties: 29, IsQuoted.
	Type_GEOMETRY Type = 2077
	// JSON specifies a JSON type.
	// Properties: 30, IsQuoted.
	Type_JSON Type = 2078
	// EXPRESSION specifies a SQL expression.
	// This type is for internal use only.
	// Properties: 31, None.
	Type_EXPRESSION Type = 31
)

var Type_name = map[int32]string{
	0:     "NULL_TYPE",
	257:   "INT8",
	770:   "UINT8",
	259:   "INT16",
	772:   "UINT16",
	261:   "INT24",
	774:   "UINT24",
	263:   "INT32",
	776:   "UINT32",
	265:   "INT64",
	778:   "UINT64",
	1035:  "FLOAT32",
	1036:  "FLOAT64",
	2061:  "TIMESTAMP",
	2062:  "DATE",
	2063:  "TIME",
	2064:  "DATETIME",
	785:   "YEAR",
	18:    "DECIMAL",
	6163:  "TEXT",
	10260: "BLOB",
	6165:  "VARCHAR",
	10262: "VARBINARY",
	6167:  "CHAR",
	10264: "BINARY",
	2073:  "BIT",
	2074:  "ENUM",
	2075:  "SET",
	28:    "TUPLE",
	2077:  "GEOMETRY",
	2078:  "JSON",
	31:    "EXPRESSION",
}
var Type_value = map[string]int32{
	"NULL_TYPE":  0,
	"INT8":       257,
	"UINT8":      770,
	"INT16":      259,
	"UINT16":     772,
	"INT24":      261,
	"UINT24":     774,
	"INT32":      263,
	"UINT32":     776,
	"INT64":      265,
	"UINT64":     778,
	"FLOAT32":    1035,
	"FLOAT64":    1036,
	"TIMESTAMP":  2061,
	"DATE":       2062,
	"TIME":       2063,
	"DATETIME":   2064,
	"YEAR":       785,
	"DECIMAL":    18,
	"TEXT":       6163,
	"BLOB":       10260,
	"VARCHAR":    6165,
	"VARBINARY":  10262,
	"CHAR":       6167,
	"BINARY":     10264,
	"BIT":        2073,
	"ENUM":       2074,
	"SET":        2075,
	"TUPLE":      28,
	"GEOMETRY":   2077,
	"JSON":       2078,
	"EXPRESSION": 31,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{2}
}

// TransactionState represents the state of a distributed transaction.
type TransactionState int32

const (
	TransactionState_UNKNOWN  TransactionState = 0
	TransactionState_PREPARE  TransactionState = 1
	TransactionState_COMMIT   TransactionState = 2
	TransactionState_ROLLBACK TransactionState = 3
)

var TransactionState_name = map[int32]string{
	0: "UNKNOWN",
	1: "PREPARE",
	2: "COMMIT",
	3: "ROLLBACK",
}
var TransactionState_value = map[string]int32{
	"UNKNOWN":  0,
	"PREPARE":  1,
	"COMMIT":   2,
	"ROLLBACK": 3,
}

func (x TransactionState) String() string {
	return proto.EnumName(TransactionState_name, int32(x))
}
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{3}
}

type ExecuteOptions_IncludedFields int32

const (
	ExecuteOptions_TYPE_AND_NAME ExecuteOptions_IncludedFields = 0
	ExecuteOptions_TYPE_ONLY     ExecuteOptions_IncludedFields = 1
	ExecuteOptions_ALL           ExecuteOptions_IncludedFields = 2
)

var ExecuteOptions_IncludedFields_name = map[int32]string{
	0: "TYPE_AND_NAME",
	1: "TYPE_ONLY",
	2: "ALL",
}
var ExecuteOptions_IncludedFields_value = map[string]int32{
	"TYPE_AND_NAME": 0,
	"TYPE_ONLY":     1,
	"ALL":           2,
}

func (x ExecuteOptions_IncludedFields) String() string {
	return proto.EnumName(ExecuteOptions_IncludedFields_name, int32(x))
}
func (ExecuteOptions_IncludedFields) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{6, 0}
}

type ExecuteOptions_Workload int32

const (
	ExecuteOptions_UNSPECIFIED ExecuteOptions_Workload = 0
	ExecuteOptions_OLTP        ExecuteOptions_Workload = 1
	ExecuteOptions_OLAP        ExecuteOptions_Workload = 2
	ExecuteOptions_DBA         ExecuteOptions_Workload = 3
)

var ExecuteOptions_Workload_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "OLTP",
	2: "OLAP",
	3: "DBA",
}
var ExecuteOptions_Workload_value = map[string]int32{
	"UNSPECIFIED": 0,
	"OLTP":        1,
	"OLAP":        2,
	"DBA":         3,
}

func (x ExecuteOptions_Workload) String() string {
	return proto.EnumName(ExecuteOptions_Workload_name, int32(x))
}
func (ExecuteOptions_Workload) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{6, 1}
}

type ExecuteOptions_TransactionIsolation int32

const (
	ExecuteOptions_DEFAULT          ExecuteOptions_TransactionIsolation = 0
	ExecuteOptions_REPEATABLE_READ  ExecuteOptions_TransactionIsolation = 1
	ExecuteOptions_READ_COMMITTED   ExecuteOptions_TransactionIsolation = 2
	ExecuteOptions_READ_UNCOMMITTED ExecuteOptions_TransactionIsolation = 3
	ExecuteOptions_SERIALIZABLE     ExecuteOptions_TransactionIsolation = 4
	// This is not an "official" transaction level but it will do a
	// START TRANSACTION WITH CONSISTENT SNAPSHOT, READ ONLY
	ExecuteOptions_CONSISTENT_SNAPSHOT_READ_ONLY ExecuteOptions_TransactionIsolation = 5
)

var ExecuteOptions_TransactionIsolation_name = map[int32]string{
	0: "DEFAULT",
	1: "REPEATABLE_READ",
	2: "READ_COMMITTED",
	3: "READ_UNCOMMITTED",
	4: "SERIALIZABLE",
	5: "CONSISTENT_SNAPSHOT_READ_ONLY",
}
var ExecuteOptions_TransactionIsolation_value = map[string]int32{
	"DEFAULT":                       0,
	"REPEATABLE_READ":               1,
	"READ_COMMITTED":                2,
	"READ_UNCOMMITTED":              3,
	"SERIALIZABLE":                  4,
	"CONSISTENT_SNAPSHOT_READ_ONLY": 5,
}

func (x ExecuteOptions_TransactionIsolation) String() string {
	return proto.EnumName(ExecuteOptions_TransactionIsolation_name, int32(x))
}
func (ExecuteOptions_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{6, 2}
}

// The category of one statement.
type StreamEvent_Statement_Category int32

const (
	StreamEvent_Statement_Error StreamEvent_Statement_Category = 0
	StreamEvent_Statement_DML   StreamEvent_Statement_Category = 1
	StreamEvent_Statement_DDL   StreamEvent_Statement_Category = 2
)

var StreamEvent_Statement_Category_name = map[int32]string{
	0: "Error",
	1: "DML",
	2: "DDL",
}
var StreamEvent_Statement_Category_value = map[string]int32{
	"Error": 0,
	"DML":   1,
	"DDL":   2,
}

func (x StreamEvent_Statement_Category) String() string {
	return proto.EnumName(StreamEvent_Statement_Category_name, int32(x))
}
func (StreamEvent_Statement_Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{11, 0, 0}
}

type SplitQueryRequest_Algorithm int32

const (
	SplitQueryRequest_EQUAL_SPLITS SplitQueryRequest_Algorithm = 0
	SplitQueryRequest_FULL_SCAN    SplitQueryRequest_Algorithm = 1
)

var SplitQueryRequest_Algorithm_name = map[int32]string{
	0: "EQUAL_SPLITS",
	1: "FULL_SCAN",
}
var SplitQueryRequest_Algorithm_value = map[string]int32{
	"EQUAL_SPLITS": 0,
	"FULL_SCAN":    1,
}

func (x SplitQueryRequest_Algorithm) String() string {
	return proto.EnumName(SplitQueryRequest_Algorithm_name, int32(x))
}
func (SplitQueryRequest_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{49, 0}
}

// Target describes what the client expects the tablet is.
// If the tablet does not match, an error is returned.
type Target struct {
	Keyspace   string              `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	Shard      string              `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	TabletType topodata.TabletType `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// cell is used for routing queries between vtgate and vttablets. It
	// is not used when Target is part of the Session sent by the client.
	Cell                 string   `protobuf:"bytes,4,opt,name=cell" json:"cell,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{0}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (dst *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(dst, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *Target) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *Target) GetTabletType() topodata.TabletType {
	if m != nil {
		return m.TabletType
	}
	return topodata.TabletType_UNKNOWN
}

func (m *Target) GetCell() string {
	if m != nil {
		return m.Cell
	}
	return ""
}

// VTGateCallerID is sent by VTGate to VTTablet to describe the
// caller. If possible, this information is secure. For instance,
// if using unique certificates that guarantee that VTGate->VTTablet
// traffic cannot be spoofed, then VTTablet can trust this information,
// and VTTablet will use it for tablet ACLs, for instance.
// Because of this security guarantee, this is different than the CallerID
// structure, which is not secure at all, because it is provided
// by the Vitess client.
type VTGateCallerID struct {
	Username             string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Groups               []string `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VTGateCallerID) Reset()         { *m = VTGateCallerID{} }
func (m *VTGateCallerID) String() string { return proto.CompactTextString(m) }
func (*VTGateCallerID) ProtoMessage()    {}
func (*VTGateCallerID) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{1}
}
func (m *VTGateCallerID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VTGateCallerID.Unmarshal(m, b)
}
func (m *VTGateCallerID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VTGateCallerID.Marshal(b, m, deterministic)
}
func (dst *VTGateCallerID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VTGateCallerID.Merge(dst, src)
}
func (m *VTGateCallerID) XXX_Size() int {
	return xxx_messageInfo_VTGateCallerID.Size(m)
}
func (m *VTGateCallerID) XXX_DiscardUnknown() {
	xxx_messageInfo_VTGateCallerID.DiscardUnknown(m)
}

var xxx_messageInfo_VTGateCallerID proto.InternalMessageInfo

func (m *VTGateCallerID) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *VTGateCallerID) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

// EventToken is a structure that describes a point in time in a
// replication stream on one shard. The most recent known replication
// position can be retrieved from vttablet when executing a query. It
// is also sent with the replication streams from the binlog service.
type EventToken struct {
	// timestamp is the MySQL timestamp of the statements. Seconds since Epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The shard name that applied the statements. Note this is not set when
	// streaming from a vttablet. It is only used on the client -> vtgate link.
	Shard string `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
	// The position on the replication stream after this statement was applied.
	// It is not the transaction ID / GTID, but the position / GTIDSet.
	Position             string   `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventToken) Reset()         { *m = EventToken{} }
func (m *EventToken) String() string { return proto.CompactTextString(m) }
func (*EventToken) ProtoMessage()    {}
func (*EventToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{2}
}
func (m *EventToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventToken.Unmarshal(m, b)
}
func (m *EventToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventToken.Marshal(b, m, deterministic)
}
func (dst *EventToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventToken.Merge(dst, src)
}
func (m *EventToken) XXX_Size() int {
	return xxx_messageInfo_EventToken.Size(m)
}
func (m *EventToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EventToken.DiscardUnknown(m)
}

var xxx_messageInfo_EventToken proto.InternalMessageInfo

func (m *EventToken) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EventToken) GetShard() string {
	if m != nil {
		return m.Shard
	}
	return ""
}

func (m *EventToken) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

// Value represents a typed value.
type Value struct {
	Type                 Type     `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{3}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (dst *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(dst, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// BindVariable represents a single bind variable in a Query.
type BindVariable struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=query.Type" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// values are set if type is TUPLE.
	Values               []*Value `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BindVariable) Reset()         { *m = BindVariable{} }
func (m *BindVariable) String() string { return proto.CompactTextString(m) }
func (*BindVariable) ProtoMessage()    {}
func (*BindVariable) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{4}
}
func (m *BindVariable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BindVariable.Unmarshal(m, b)
}
func (m *BindVariable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BindVariable.Marshal(b, m, deterministic)
}
func (dst *BindVariable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindVariable.Merge(dst, src)
}
func (m *BindVariable) XXX_Size() int {
	return xxx_messageInfo_BindVariable.Size(m)
}
func (m *BindVariable) XXX_DiscardUnknown() {
	xxx_messageInfo_BindVariable.DiscardUnknown(m)
}

var xxx_messageInfo_BindVariable proto.InternalMessageInfo

func (m *BindVariable) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *BindVariable) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BindVariable) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// BoundQuery is a query with its bind variables
type BoundQuery struct {
	// sql is the SQL query to execute
	Sql string `protobuf:"bytes,1,opt,name=sql" json:"sql,omitempty"`
	// bind_variables is a map of all bind variables to expand in the query.
	// nil values are not allowed. Use NULL_TYPE to express a NULL value.
	BindVariables        map[string]*BindVariable `protobuf:"bytes,2,rep,name=bind_variables,json=bindVariables" json:"bind_variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BoundQuery) Reset()         { *m = BoundQuery{} }
func (m *BoundQuery) String() string { return proto.CompactTextString(m) }
func (*BoundQuery) ProtoMessage()    {}
func (*BoundQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{5}
}
func (m *BoundQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoundQuery.Unmarshal(m, b)
}
func (m *BoundQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoundQuery.Marshal(b, m, deterministic)
}
func (dst *BoundQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundQuery.Merge(dst, src)
}
func (m *BoundQuery) XXX_Size() int {
	return xxx_messageInfo_BoundQuery.Size(m)
}
func (m *BoundQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BoundQuery proto.InternalMessageInfo

func (m *BoundQuery) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *BoundQuery) GetBindVariables() map[string]*BindVariable {
	if m != nil {
		return m.BindVariables
	}
	return nil
}

// ExecuteOptions is passed around for all Execute calls.
type ExecuteOptions struct {
	// If set, we will try to include an EventToken with the responses.
	IncludeEventToken bool `protobuf:"varint,2,opt,name=include_event_token,json=includeEventToken" json:"include_event_token,omitempty"`
	// If set, the fresher field may be set as a result comparison to this token.
	// This is a shortcut so the application doesn't need to care about
	// comparing EventTokens.
	CompareEventToken *EventToken `protobuf:"bytes,3,opt,name=compare_event_token,json=compareEventToken" json:"compare_event_token,omitempty"`
	// Controls what fields are returned in Field message responses from mysql, i.e.
	// field name, table name, etc. This is an optimization for high-QPS queries where
	// the client knows what it's getting
	IncludedFields ExecuteOptions_IncludedFields `protobuf:"varint,4,opt,name=included_fields,json=includedFields,enum=query.ExecuteOptions_IncludedFields" json:"included_fields,omitempty"`
	// client_rows_found specifies if rows_affected should return
	// rows found instead of rows affected. Behavior is defined
	// by MySQL's CLIENT_FOUND_ROWS flag.
	ClientFoundRows bool `protobuf:"varint,5,opt,name=client_found_rows,json=clientFoundRows" json:"client_found_rows,omitempty"`
	// workload specifies the type of workload:
	// OLTP: DMLs allowed, results have row count limit, and
	// query timeouts are shorter.
	// OLAP: DMLS not allowed, no limit on row count, timeouts
	// can be as high as desired.
	// DBA: no limit on rowcount or timeout, all queries allowed
	// but intended for long DMLs and DDLs.
	Workload ExecuteOptions_Workload `protobuf:"varint,6,opt,name=workload,enum=query.ExecuteOptions_Workload" json:"workload,omitempty"`
	// sql_select_limit sets an implicit limit on all select statements. Since
	// vitess also sets a rowcount limit on queries, the smallest value wins.
	SqlSelectLimit       int64                               `protobuf:"varint,8,opt,name=sql_select_limit,json=sqlSelectLimit" json:"sql_select_limit,omitempty"`
	TransactionIsolation ExecuteOptions_TransactionIsolation `protobuf:"varint,9,opt,name=transaction_isolation,json=transactionIsolation,enum=query.ExecuteOptions_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// skip_query_plan_cache specifies if the query plan shoud be cached by vitess.
	// By default all query plans are cached.
	SkipQueryPlanCache   bool     `protobuf:"varint,10,opt,name=skip_query_plan_cache,json=skipQueryPlanCache" json:"skip_query_plan_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteOptions) Reset()         { *m = ExecuteOptions{} }
func (m *ExecuteOptions) String() string { return proto.CompactTextString(m) }
func (*ExecuteOptions) ProtoMessage()    {}
func (*ExecuteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{6}
}
func (m *ExecuteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteOptions.Unmarshal(m, b)
}
func (m *ExecuteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteOptions.Marshal(b, m, deterministic)
}
func (dst *ExecuteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteOptions.Merge(dst, src)
}
func (m *ExecuteOptions) XXX_Size() int {
	return xxx_messageInfo_ExecuteOptions.Size(m)
}
func (m *ExecuteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteOptions proto.InternalMessageInfo

func (m *ExecuteOptions) GetIncludeEventToken() bool {
	if m != nil {
		return m.IncludeEventToken
	}
	return false
}

func (m *ExecuteOptions) GetCompareEventToken() *EventToken {
	if m != nil {
		return m.CompareEventToken
	}
	return nil
}

func (m *ExecuteOptions) GetIncludedFields() ExecuteOptions_IncludedFields {
	if m != nil {
		return m.IncludedFields
	}
	return ExecuteOptions_TYPE_AND_NAME
}

func (m *ExecuteOptions) GetClientFoundRows() bool {
	if m != nil {
		return m.ClientFoundRows
	}
	return false
}

func (m *ExecuteOptions) GetWorkload() ExecuteOptions_Workload {
	if m != nil {
		return m.Workload
	}
	return ExecuteOptions_UNSPECIFIED
}

func (m *ExecuteOptions) GetSqlSelectLimit() int64 {
	if m != nil {
		return m.SqlSelectLimit
	}
	return 0
}

func (m *ExecuteOptions) GetTransactionIsolation() ExecuteOptions_TransactionIsolation {
	if m != nil {
		return m.TransactionIsolation
	}
	return ExecuteOptions_DEFAULT
}

func (m *ExecuteOptions) GetSkipQueryPlanCache() bool {
	if m != nil {
		return m.SkipQueryPlanCache
	}
	return false
}

// Field describes a single column returned by a query
type Field struct {
	// name of the field as returned by mysql C API
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// vitess-defined type. Conversion function is in sqltypes package.
	Type Type `protobuf:"varint,2,opt,name=type,enum=query.Type" json:"type,omitempty"`
	// Remaining fields from mysql C API.
	// These fields are only populated when ExecuteOptions.included_fields
	// is set to IncludedFields.ALL.
	Table    string `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
	OrgTable string `protobuf:"bytes,4,opt,name=org_table,json=orgTable" json:"org_table,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database" json:"database,omitempty"`
	OrgName  string `protobuf:"bytes,6,opt,name=org_name,json=orgName" json:"org_name,omitempty"`
	// column_length is really a uint32. All 32 bits can be used.
	ColumnLength uint32 `protobuf:"varint,7,opt,name=column_length,json=columnLength" json:"column_length,omitempty"`
	// charset is actually a uint16. Only the lower 16 bits are used.
	Charset uint32 `protobuf:"varint,8,opt,name=charset" json:"charset,omitempty"`
	// decimals is actualy a uint8. Only the lower 8 bits are used.
	Decimals uint32 `protobuf:"varint,9,opt,name=decimals" json:"decimals,omitempty"`
	// flags is actually a uint16. Only the lower 16 bits are used.
	Flags                uint32   `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{7}
}
func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (dst *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(dst, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_NULL_TYPE
}

func (m *Field) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Field) GetOrgTable() string {
	if m != nil {
		return m.OrgTable
	}
	return ""
}

func (m *Field) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Field) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *Field) GetColumnLength() uint32 {
	if m != nil {
		return m.ColumnLength
	}
	return 0
}

func (m *Field) GetCharset() uint32 {
	if m != nil {
		return m.Charset
	}
	return 0
}

func (m *Field) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Field) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

// Row is a database row.
type Row struct {
	// lengths contains the length of each value in values.
	// A length of -1 means that the field is NULL. While
	// reading values, you have to accummulate the length
	// to know the offset where the next value begins in values.
	Lengths []int64 `protobuf:"zigzag64,1,rep,packed,name=lengths" json:"lengths,omitempty"`
	// values contains a concatenation of all values in the row.
	Values               []byte   `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{8}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (dst *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(dst, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetLengths() []int64 {
	if m != nil {
		return m.Lengths
	}
	return nil
}

func (m *Row) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

// ResultExtras contains optional out-of-band information. Usually the
// extras are requested by adding ExecuteOptions flags.
type ResultExtras struct {
	// event_token is populated if the include_event_token flag is set
	// in ExecuteOptions.
	EventToken *EventToken `protobuf:"bytes,1,opt,name=event_token,json=eventToken" json:"event_token,omitempty"`
	// If set, it means the data returned with this result is fresher
	// than the compare_token passed in the ExecuteOptions.
	Fresher              bool     `protobuf:"varint,2,opt,name=fresher" json:"fresher,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultExtras) Reset()         { *m = ResultExtras{} }
func (m *ResultExtras) String() string { return proto.CompactTextString(m) }
func (*ResultExtras) ProtoMessage()    {}
func (*ResultExtras) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{9}
}
func (m *ResultExtras) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultExtras.Unmarshal(m, b)
}
func (m *ResultExtras) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultExtras.Marshal(b, m, deterministic)
}
func (dst *ResultExtras) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultExtras.Merge(dst, src)
}
func (m *ResultExtras) XXX_Size() int {
	return xxx_messageInfo_ResultExtras.Size(m)
}
func (m *ResultExtras) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultExtras.DiscardUnknown(m)
}

var xxx_messageInfo_ResultExtras proto.InternalMessageInfo

func (m *ResultExtras) GetEventToken() *EventToken {
	if m != nil {
		return m.EventToken
	}
	return nil
}

func (m *ResultExtras) GetFresher() bool {
	if m != nil {
		return m.Fresher
	}
	return false
}

// QueryResult is returned by Execute and ExecuteStream.
//
// As returned by Execute, len(fields) is always equal to len(row)
// (for each row in rows).
//
// As returned by StreamExecute, the first QueryResult has the fields
// set, and subsequent QueryResult have rows set. And as Execute,
// len(QueryResult[0].fields) is always equal to len(row) (for each
// row in rows for each QueryResult in QueryResult[1:]).
type QueryResult struct {
	Fields               []*Field      `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	RowsAffected         uint64        `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected" json:"rows_affected,omitempty"`
	InsertId             uint64        `protobuf:"varint,3,opt,name=insert_id,json=insertId" json:"insert_id,omitempty"`
	Rows                 []*Row        `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
	Extras               *ResultExtras `protobuf:"bytes,5,opt,name=extras" json:"extras,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{10}
}
func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (dst *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(dst, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

func (m *QueryResult) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *QueryResult) GetRowsAffected() uint64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func (m *QueryResult) GetInsertId() uint64 {
	if m != nil {
		return m.InsertId
	}
	return 0
}

func (m *QueryResult) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *QueryResult) GetExtras() *ResultExtras {
	if m != nil {
		return m.Extras
	}
	return nil
}

// StreamEvent describes a set of transformations that happened as a
// single transactional unit on a server. It is streamed back by the
// Update Stream calls.
type StreamEvent struct {
	// The statements in this transaction.
	Statements []*StreamEvent_Statement `protobuf:"bytes,1,rep,name=statements" json:"statements,omitempty"`
	// The Event Token for this event.
	EventToken           *EventToken `protobuf:"bytes,2,opt,name=event_token,json=eventToken" json:"event_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{11}
}
func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent.Unmarshal(m, b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent.Marshal(b, m, deterministic)
}
func (dst *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(dst, src)
}
func (m *StreamEvent) XXX_Size() int {
	return xxx_messageInfo_StreamEvent.Size(m)
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

func (m *StreamEvent) GetStatements() []*StreamEvent_Statement {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *StreamEvent) GetEventToken() *EventToken {
	if m != nil {
		return m.EventToken
	}
	return nil
}

// One individual Statement in a transaction.
type StreamEvent_Statement struct {
	Category StreamEvent_Statement_Category `protobuf:"varint,1,opt,name=category,enum=query.StreamEvent_Statement_Category" json:"category,omitempty"`
	// table_name, primary_key_fields and primary_key_values are set for DML.
	TableName        string   `protobuf:"bytes,2,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	PrimaryKeyFields []*Field `protobuf:"bytes,3,rep,name=primary_key_fields,json=primaryKeyFields" json:"primary_key_fields,omitempty"`
	PrimaryKeyValues []*Row   `protobuf:"bytes,4,rep,name=primary_key_values,json=primaryKeyValues" json:"primary_key_values,omitempty"`
	// sql is set for all queries.
	// FIXME(alainjobart) we may not need it for DMLs.
	Sql                  []byte   `protobuf:"bytes,5,opt,name=sql,proto3" json:"sql,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEvent_Statement) Reset()         { *m = StreamEvent_Statement{} }
func (m *StreamEvent_Statement) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_Statement) ProtoMessage()    {}
func (*StreamEvent_Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{11, 0}
}
func (m *StreamEvent_Statement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent_Statement.Unmarshal(m, b)
}
func (m *StreamEvent_Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent_Statement.Marshal(b, m, deterministic)
}
func (dst *StreamEvent_Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_Statement.Merge(dst, src)
}
func (m *StreamEvent_Statement) XXX_Size() int {
	return xxx_messageInfo_StreamEvent_Statement.Size(m)
}
func (m *StreamEvent_Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_Statement proto.InternalMessageInfo

func (m *StreamEvent_Statement) GetCategory() StreamEvent_Statement_Category {
	if m != nil {
		return m.Category
	}
	return StreamEvent_Statement_Error
}

func (m *StreamEvent_Statement) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *StreamEvent_Statement) GetPrimaryKeyFields() []*Field {
	if m != nil {
		return m.PrimaryKeyFields
	}
	return nil
}

func (m *StreamEvent_Statement) GetPrimaryKeyValues() []*Row {
	if m != nil {
		return m.PrimaryKeyValues
	}
	return nil
}

func (m *StreamEvent_Statement) GetSql() []byte {
	if m != nil {
		return m.Sql
	}
	return nil
}

// ExecuteRequest is the payload to Execute
type ExecuteRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query                *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	TransactionId        int64           `protobuf:"varint,5,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Options              *ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{12}
}
func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRequest.Unmarshal(m, b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
}
func (dst *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(dst, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRequest.Size(m)
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *ExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *ExecuteRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ExecuteRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *ExecuteRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteResponse is the returned value from Execute
type ExecuteResponse struct {
	Result               *QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{13}
}
func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteResponse.Unmarshal(m, b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
}
func (dst *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(dst, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteResponse.Size(m)
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ResultWithError represents a query response
// in the form of result or error but not both.
// TODO: To be used in ExecuteBatchResponse and BeginExecuteBatchResponse.
type ResultWithError struct {
	// error contains an query level error, only set if result is unset.
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// result contains the query result, only set if error is unset.
	Result               *QueryResult `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResultWithError) Reset()         { *m = ResultWithError{} }
func (m *ResultWithError) String() string { return proto.CompactTextString(m) }
func (*ResultWithError) ProtoMessage()    {}
func (*ResultWithError) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{14}
}
func (m *ResultWithError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultWithError.Unmarshal(m, b)
}
func (m *ResultWithError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultWithError.Marshal(b, m, deterministic)
}
func (dst *ResultWithError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultWithError.Merge(dst, src)
}
func (m *ResultWithError) XXX_Size() int {
	return xxx_messageInfo_ResultWithError.Size(m)
}
func (m *ResultWithError) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultWithError.DiscardUnknown(m)
}

var xxx_messageInfo_ResultWithError proto.InternalMessageInfo

func (m *ResultWithError) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ResultWithError) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteBatchRequest is the payload to ExecuteBatch
type ExecuteBatchRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Queries              []*BoundQuery   `protobuf:"bytes,4,rep,name=queries" json:"queries,omitempty"`
	AsTransaction        bool            `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	TransactionId        int64           `protobuf:"varint,6,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Options              *ExecuteOptions `protobuf:"bytes,7,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExecuteBatchRequest) Reset()         { *m = ExecuteBatchRequest{} }
func (m *ExecuteBatchRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchRequest) ProtoMessage()    {}
func (*ExecuteBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{15}
}
func (m *ExecuteBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteBatchRequest.Unmarshal(m, b)
}
func (m *ExecuteBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteBatchRequest.Marshal(b, m, deterministic)
}
func (dst *ExecuteBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBatchRequest.Merge(dst, src)
}
func (m *ExecuteBatchRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteBatchRequest.Size(m)
}
func (m *ExecuteBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBatchRequest proto.InternalMessageInfo

func (m *ExecuteBatchRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *ExecuteBatchRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *ExecuteBatchRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ExecuteBatchRequest) GetQueries() []*BoundQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *ExecuteBatchRequest) GetAsTransaction() bool {
	if m != nil {
		return m.AsTransaction
	}
	return false
}

func (m *ExecuteBatchRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *ExecuteBatchRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteBatchResponse is the returned value from ExecuteBatch
type ExecuteBatchResponse struct {
	Results              []*QueryResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExecuteBatchResponse) Reset()         { *m = ExecuteBatchResponse{} }
func (m *ExecuteBatchResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchResponse) ProtoMessage()    {}
func (*ExecuteBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{16}
}
func (m *ExecuteBatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteBatchResponse.Unmarshal(m, b)
}
func (m *ExecuteBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteBatchResponse.Marshal(b, m, deterministic)
}
func (dst *ExecuteBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBatchResponse.Merge(dst, src)
}
func (m *ExecuteBatchResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteBatchResponse.Size(m)
}
func (m *ExecuteBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBatchResponse proto.InternalMessageInfo

func (m *ExecuteBatchResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute
type StreamExecuteRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query                *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Options              *ExecuteOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	TransactionId        int64           `protobuf:"varint,6,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StreamExecuteRequest) Reset()         { *m = StreamExecuteRequest{} }
func (m *StreamExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*StreamExecuteRequest) ProtoMessage()    {}
func (*StreamExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{17}
}
func (m *StreamExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamExecuteRequest.Unmarshal(m, b)
}
func (m *StreamExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamExecuteRequest.Marshal(b, m, deterministic)
}
func (dst *StreamExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamExecuteRequest.Merge(dst, src)
}
func (m *StreamExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_StreamExecuteRequest.Size(m)
}
func (m *StreamExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamExecuteRequest proto.InternalMessageInfo

func (m *StreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *StreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *StreamExecuteRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *StreamExecuteRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *StreamExecuteRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

// StreamExecuteResponse is the returned value from StreamExecute
type StreamExecuteResponse struct {
	Result               *QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StreamExecuteResponse) Reset()         { *m = StreamExecuteResponse{} }
func (m *StreamExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*StreamExecuteResponse) ProtoMessage()    {}
func (*StreamExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{18}
}
func (m *StreamExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamExecuteResponse.Unmarshal(m, b)
}
func (m *StreamExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamExecuteResponse.Marshal(b, m, deterministic)
}
func (dst *StreamExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamExecuteResponse.Merge(dst, src)
}
func (m *StreamExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_StreamExecuteResponse.Size(m)
}
func (m *StreamExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamExecuteResponse proto.InternalMessageInfo

func (m *StreamExecuteResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// BeginRequest is the payload to Begin
type BeginRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Options              *ExecuteOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BeginRequest) Reset()         { *m = BeginRequest{} }
func (m *BeginRequest) String() string { return proto.CompactTextString(m) }
func (*BeginRequest) ProtoMessage()    {}
func (*BeginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{19}
}
func (m *BeginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeginRequest.Unmarshal(m, b)
}
func (m *BeginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeginRequest.Marshal(b, m, deterministic)
}
func (dst *BeginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginRequest.Merge(dst, src)
}
func (m *BeginRequest) XXX_Size() int {
	return xxx_messageInfo_BeginRequest.Size(m)
}
func (m *BeginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeginRequest proto.InternalMessageInfo

func (m *BeginRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *BeginRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *BeginRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BeginRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// BeginResponse is the returned value from Begin
type BeginResponse struct {
	TransactionId        int64    `protobuf:"varint,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeginResponse) Reset()         { *m = BeginResponse{} }
func (m *BeginResponse) String() string { return proto.CompactTextString(m) }
func (*BeginResponse) ProtoMessage()    {}
func (*BeginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{20}
}
func (m *BeginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeginResponse.Unmarshal(m, b)
}
func (m *BeginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeginResponse.Marshal(b, m, deterministic)
}
func (dst *BeginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginResponse.Merge(dst, src)
}
func (m *BeginResponse) XXX_Size() int {
	return xxx_messageInfo_BeginResponse.Size(m)
}
func (m *BeginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeginResponse proto.InternalMessageInfo

func (m *BeginResponse) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

// CommitRequest is the payload to Commit
type CommitRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId        int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{21}
}
func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (dst *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(dst, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *CommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *CommitRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CommitRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

// CommitResponse is the returned value from Commit
type CommitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{22}
}
func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (dst *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(dst, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

// RollbackRequest is the payload to Rollback
type RollbackRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId        int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RollbackRequest) Reset()         { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()    {}
func (*RollbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{23}
}
func (m *RollbackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackRequest.Unmarshal(m, b)
}
func (m *RollbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackRequest.Marshal(b, m, deterministic)
}
func (dst *RollbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackRequest.Merge(dst, src)
}
func (m *RollbackRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackRequest.Size(m)
}
func (m *RollbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackRequest proto.InternalMessageInfo

func (m *RollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *RollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *RollbackRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *RollbackRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

// RollbackResponse is the returned value from Rollback
type RollbackResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackResponse) Reset()         { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()    {}
func (*RollbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{24}
}
func (m *RollbackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackResponse.Unmarshal(m, b)
}
func (m *RollbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackResponse.Marshal(b, m, deterministic)
}
func (dst *RollbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackResponse.Merge(dst, src)
}
func (m *RollbackResponse) XXX_Size() int {
	return xxx_messageInfo_RollbackResponse.Size(m)
}
func (m *RollbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackResponse proto.InternalMessageInfo

// PrepareRequest is the payload to Prepare
type PrepareRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId        int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Dtid                 string          `protobuf:"bytes,5,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PrepareRequest) Reset()         { *m = PrepareRequest{} }
func (m *PrepareRequest) String() string { return proto.CompactTextString(m) }
func (*PrepareRequest) ProtoMessage()    {}
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{25}
}
func (m *PrepareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareRequest.Unmarshal(m, b)
}
func (m *PrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareRequest.Marshal(b, m, deterministic)
}
func (dst *PrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareRequest.Merge(dst, src)
}
func (m *PrepareRequest) XXX_Size() int {
	return xxx_messageInfo_PrepareRequest.Size(m)
}
func (m *PrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareRequest proto.InternalMessageInfo

func (m *PrepareRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *PrepareRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *PrepareRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *PrepareRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *PrepareRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// PrepareResponse is the returned value from Prepare
type PrepareResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrepareResponse) Reset()         { *m = PrepareResponse{} }
func (m *PrepareResponse) String() string { return proto.CompactTextString(m) }
func (*PrepareResponse) ProtoMessage()    {}
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{26}
}
func (m *PrepareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrepareResponse.Unmarshal(m, b)
}
func (m *PrepareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrepareResponse.Marshal(b, m, deterministic)
}
func (dst *PrepareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareResponse.Merge(dst, src)
}
func (m *PrepareResponse) XXX_Size() int {
	return xxx_messageInfo_PrepareResponse.Size(m)
}
func (m *PrepareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareResponse proto.InternalMessageInfo

// CommitPreparedRequest is the payload to CommitPrepared
type CommitPreparedRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Dtid                 string          `protobuf:"bytes,4,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CommitPreparedRequest) Reset()         { *m = CommitPreparedRequest{} }
func (m *CommitPreparedRequest) String() string { return proto.CompactTextString(m) }
func (*CommitPreparedRequest) ProtoMessage()    {}
func (*CommitPreparedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{27}
}
func (m *CommitPreparedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitPreparedRequest.Unmarshal(m, b)
}
func (m *CommitPreparedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitPreparedRequest.Marshal(b, m, deterministic)
}
func (dst *CommitPreparedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitPreparedRequest.Merge(dst, src)
}
func (m *CommitPreparedRequest) XXX_Size() int {
	return xxx_messageInfo_CommitPreparedRequest.Size(m)
}
func (m *CommitPreparedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitPreparedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitPreparedRequest proto.InternalMessageInfo

func (m *CommitPreparedRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *CommitPreparedRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *CommitPreparedRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CommitPreparedRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// CommitPreparedResponse is the returned value from CommitPrepared
type CommitPreparedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitPreparedResponse) Reset()         { *m = CommitPreparedResponse{} }
func (m *CommitPreparedResponse) String() string { return proto.CompactTextString(m) }
func (*CommitPreparedResponse) ProtoMessage()    {}
func (*CommitPreparedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{28}
}
func (m *CommitPreparedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitPreparedResponse.Unmarshal(m, b)
}
func (m *CommitPreparedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitPreparedResponse.Marshal(b, m, deterministic)
}
func (dst *CommitPreparedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitPreparedResponse.Merge(dst, src)
}
func (m *CommitPreparedResponse) XXX_Size() int {
	return xxx_messageInfo_CommitPreparedResponse.Size(m)
}
func (m *CommitPreparedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitPreparedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitPreparedResponse proto.InternalMessageInfo

// RollbackPreparedRequest is the payload to RollbackPrepared
type RollbackPreparedRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId        int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Dtid                 string          `protobuf:"bytes,5,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RollbackPreparedRequest) Reset()         { *m = RollbackPreparedRequest{} }
func (m *RollbackPreparedRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackPreparedRequest) ProtoMessage()    {}
func (*RollbackPreparedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{29}
}
func (m *RollbackPreparedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackPreparedRequest.Unmarshal(m, b)
}
func (m *RollbackPreparedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackPreparedRequest.Marshal(b, m, deterministic)
}
func (dst *RollbackPreparedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackPreparedRequest.Merge(dst, src)
}
func (m *RollbackPreparedRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackPreparedRequest.Size(m)
}
func (m *RollbackPreparedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackPreparedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackPreparedRequest proto.InternalMessageInfo

func (m *RollbackPreparedRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *RollbackPreparedRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *RollbackPreparedRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *RollbackPreparedRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *RollbackPreparedRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// RollbackPreparedResponse is the returned value from RollbackPrepared
type RollbackPreparedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackPreparedResponse) Reset()         { *m = RollbackPreparedResponse{} }
func (m *RollbackPreparedResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackPreparedResponse) ProtoMessage()    {}
func (*RollbackPreparedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{30}
}
func (m *RollbackPreparedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackPreparedResponse.Unmarshal(m, b)
}
func (m *RollbackPreparedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackPreparedResponse.Marshal(b, m, deterministic)
}
func (dst *RollbackPreparedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackPreparedResponse.Merge(dst, src)
}
func (m *RollbackPreparedResponse) XXX_Size() int {
	return xxx_messageInfo_RollbackPreparedResponse.Size(m)
}
func (m *RollbackPreparedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackPreparedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackPreparedResponse proto.InternalMessageInfo

// CreateTransactionRequest is the payload to CreateTransaction
type CreateTransactionRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Dtid                 string          `protobuf:"bytes,4,opt,name=dtid" json:"dtid,omitempty"`
	Participants         []*Target       `protobuf:"bytes,5,rep,name=participants" json:"participants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateTransactionRequest) Reset()         { *m = CreateTransactionRequest{} }
func (m *CreateTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTransactionRequest) ProtoMessage()    {}
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{31}
}
func (m *CreateTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTransactionRequest.Unmarshal(m, b)
}
func (m *CreateTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTransactionRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionRequest.Merge(dst, src)
}
func (m *CreateTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTransactionRequest.Size(m)
}
func (m *CreateTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionRequest proto.InternalMessageInfo

func (m *CreateTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *CreateTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *CreateTransactionRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CreateTransactionRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

func (m *CreateTransactionRequest) GetParticipants() []*Target {
	if m != nil {
		return m.Participants
	}
	return nil
}

// CreateTransactionResponse is the returned value from CreateTransaction
type CreateTransactionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTransactionResponse) Reset()         { *m = CreateTransactionResponse{} }
func (m *CreateTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTransactionResponse) ProtoMessage()    {}
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{32}
}
func (m *CreateTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTransactionResponse.Unmarshal(m, b)
}
func (m *CreateTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTransactionResponse.Marshal(b, m, deterministic)
}
func (dst *CreateTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionResponse.Merge(dst, src)
}
func (m *CreateTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTransactionResponse.Size(m)
}
func (m *CreateTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionResponse proto.InternalMessageInfo

// StartCommitRequest is the payload to StartCommit
type StartCommitRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId        int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Dtid                 string          `protobuf:"bytes,5,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StartCommitRequest) Reset()         { *m = StartCommitRequest{} }
func (m *StartCommitRequest) String() string { return proto.CompactTextString(m) }
func (*StartCommitRequest) ProtoMessage()    {}
func (*StartCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{33}
}
func (m *StartCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartCommitRequest.Unmarshal(m, b)
}
func (m *StartCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartCommitRequest.Marshal(b, m, deterministic)
}
func (dst *StartCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartCommitRequest.Merge(dst, src)
}
func (m *StartCommitRequest) XXX_Size() int {
	return xxx_messageInfo_StartCommitRequest.Size(m)
}
func (m *StartCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartCommitRequest proto.InternalMessageInfo

func (m *StartCommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *StartCommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *StartCommitRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *StartCommitRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *StartCommitRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// StartCommitResponse is the returned value from StartCommit
type StartCommitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartCommitResponse) Reset()         { *m = StartCommitResponse{} }
func (m *StartCommitResponse) String() string { return proto.CompactTextString(m) }
func (*StartCommitResponse) ProtoMessage()    {}
func (*StartCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{34}
}
func (m *StartCommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartCommitResponse.Unmarshal(m, b)
}
func (m *StartCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartCommitResponse.Marshal(b, m, deterministic)
}
func (dst *StartCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartCommitResponse.Merge(dst, src)
}
func (m *StartCommitResponse) XXX_Size() int {
	return xxx_messageInfo_StartCommitResponse.Size(m)
}
func (m *StartCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartCommitResponse proto.InternalMessageInfo

// SetRollbackRequest is the payload to SetRollback
type SetRollbackRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	TransactionId        int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Dtid                 string          `protobuf:"bytes,5,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SetRollbackRequest) Reset()         { *m = SetRollbackRequest{} }
func (m *SetRollbackRequest) String() string { return proto.CompactTextString(m) }
func (*SetRollbackRequest) ProtoMessage()    {}
func (*SetRollbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{35}
}
func (m *SetRollbackRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRollbackRequest.Unmarshal(m, b)
}
func (m *SetRollbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRollbackRequest.Marshal(b, m, deterministic)
}
func (dst *SetRollbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRollbackRequest.Merge(dst, src)
}
func (m *SetRollbackRequest) XXX_Size() int {
	return xxx_messageInfo_SetRollbackRequest.Size(m)
}
func (m *SetRollbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRollbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRollbackRequest proto.InternalMessageInfo

func (m *SetRollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *SetRollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *SetRollbackRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SetRollbackRequest) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *SetRollbackRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// SetRollbackResponse is the returned value from SetRollback
type SetRollbackResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRollbackResponse) Reset()         { *m = SetRollbackResponse{} }
func (m *SetRollbackResponse) String() string { return proto.CompactTextString(m) }
func (*SetRollbackResponse) ProtoMessage()    {}
func (*SetRollbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{36}
}
func (m *SetRollbackResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRollbackResponse.Unmarshal(m, b)
}
func (m *SetRollbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRollbackResponse.Marshal(b, m, deterministic)
}
func (dst *SetRollbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRollbackResponse.Merge(dst, src)
}
func (m *SetRollbackResponse) XXX_Size() int {
	return xxx_messageInfo_SetRollbackResponse.Size(m)
}
func (m *SetRollbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRollbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRollbackResponse proto.InternalMessageInfo

// ConcludeTransactionRequest is the payload to ConcludeTransaction
type ConcludeTransactionRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Dtid                 string          `protobuf:"bytes,4,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ConcludeTransactionRequest) Reset()         { *m = ConcludeTransactionRequest{} }
func (m *ConcludeTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*ConcludeTransactionRequest) ProtoMessage()    {}
func (*ConcludeTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{37}
}
func (m *ConcludeTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcludeTransactionRequest.Unmarshal(m, b)
}
func (m *ConcludeTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcludeTransactionRequest.Marshal(b, m, deterministic)
}
func (dst *ConcludeTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcludeTransactionRequest.Merge(dst, src)
}
func (m *ConcludeTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_ConcludeTransactionRequest.Size(m)
}
func (m *ConcludeTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcludeTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConcludeTransactionRequest proto.InternalMessageInfo

func (m *ConcludeTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *ConcludeTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *ConcludeTransactionRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ConcludeTransactionRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// ConcludeTransactionResponse is the returned value from ConcludeTransaction
type ConcludeTransactionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConcludeTransactionResponse) Reset()         { *m = ConcludeTransactionResponse{} }
func (m *ConcludeTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*ConcludeTransactionResponse) ProtoMessage()    {}
func (*ConcludeTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{38}
}
func (m *ConcludeTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConcludeTransactionResponse.Unmarshal(m, b)
}
func (m *ConcludeTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConcludeTransactionResponse.Marshal(b, m, deterministic)
}
func (dst *ConcludeTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcludeTransactionResponse.Merge(dst, src)
}
func (m *ConcludeTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_ConcludeTransactionResponse.Size(m)
}
func (m *ConcludeTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcludeTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConcludeTransactionResponse proto.InternalMessageInfo

// ReadTransactionRequest is the payload to ReadTransaction
type ReadTransactionRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Dtid                 string          `protobuf:"bytes,4,opt,name=dtid" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReadTransactionRequest) Reset()         { *m = ReadTransactionRequest{} }
func (m *ReadTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*ReadTransactionRequest) ProtoMessage()    {}
func (*ReadTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{39}
}
func (m *ReadTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadTransactionRequest.Unmarshal(m, b)
}
func (m *ReadTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadTransactionRequest.Marshal(b, m, deterministic)
}
func (dst *ReadTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadTransactionRequest.Merge(dst, src)
}
func (m *ReadTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_ReadTransactionRequest.Size(m)
}
func (m *ReadTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadTransactionRequest proto.InternalMessageInfo

func (m *ReadTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *ReadTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *ReadTransactionRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ReadTransactionRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// ReadTransactionResponse is the returned value from ReadTransaction
type ReadTransactionResponse struct {
	Metadata             *TransactionMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReadTransactionResponse) Reset()         { *m = ReadTransactionResponse{} }
func (m *ReadTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*ReadTransactionResponse) ProtoMessage()    {}
func (*ReadTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{40}
}
func (m *ReadTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadTransactionResponse.Unmarshal(m, b)
}
func (m *ReadTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadTransactionResponse.Marshal(b, m, deterministic)
}
func (dst *ReadTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadTransactionResponse.Merge(dst, src)
}
func (m *ReadTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_ReadTransactionResponse.Size(m)
}
func (m *ReadTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadTransactionResponse proto.InternalMessageInfo

func (m *ReadTransactionResponse) GetMetadata() *TransactionMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// BeginExecuteRequest is the payload to BeginExecute
type BeginExecuteRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query                *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Options              *ExecuteOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BeginExecuteRequest) Reset()         { *m = BeginExecuteRequest{} }
func (m *BeginExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*BeginExecuteRequest) ProtoMessage()    {}
func (*BeginExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{41}
}
func (m *BeginExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeginExecuteRequest.Unmarshal(m, b)
}
func (m *BeginExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeginExecuteRequest.Marshal(b, m, deterministic)
}
func (dst *BeginExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginExecuteRequest.Merge(dst, src)
}
func (m *BeginExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_BeginExecuteRequest.Size(m)
}
func (m *BeginExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeginExecuteRequest proto.InternalMessageInfo

func (m *BeginExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *BeginExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *BeginExecuteRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BeginExecuteRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *BeginExecuteRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// BeginExecuteResponse is the returned value from BeginExecute
type BeginExecuteResponse struct {
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId        int64    `protobuf:"varint,3,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeginExecuteResponse) Reset()         { *m = BeginExecuteResponse{} }
func (m *BeginExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*BeginExecuteResponse) ProtoMessage()    {}
func (*BeginExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{42}
}
func (m *BeginExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeginExecuteResponse.Unmarshal(m, b)
}
func (m *BeginExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeginExecuteResponse.Marshal(b, m, deterministic)
}
func (dst *BeginExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginExecuteResponse.Merge(dst, src)
}
func (m *BeginExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_BeginExecuteResponse.Size(m)
}
func (m *BeginExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeginExecuteResponse proto.InternalMessageInfo

func (m *BeginExecuteResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BeginExecuteResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *BeginExecuteResponse) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

// BeginExecuteBatchRequest is the payload to BeginExecuteBatch
type BeginExecuteBatchRequest struct {
	EffectiveCallerId    *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId    *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target               *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Queries              []*BoundQuery   `protobuf:"bytes,4,rep,name=queries" json:"queries,omitempty"`
	AsTransaction        bool            `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction" json:"as_transaction,omitempty"`
	Options              *ExecuteOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BeginExecuteBatchRequest) Reset()         { *m = BeginExecuteBatchRequest{} }
func (m *BeginExecuteBatchRequest) String() string { return proto.CompactTextString(m) }
func (*BeginExecuteBatchRequest) ProtoMessage()    {}
func (*BeginExecuteBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{43}
}
func (m *BeginExecuteBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeginExecuteBatchRequest.Unmarshal(m, b)
}
func (m *BeginExecuteBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeginExecuteBatchRequest.Marshal(b, m, deterministic)
}
func (dst *BeginExecuteBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginExecuteBatchRequest.Merge(dst, src)
}
func (m *BeginExecuteBatchRequest) XXX_Size() int {
	return xxx_messageInfo_BeginExecuteBatchRequest.Size(m)
}
func (m *BeginExecuteBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginExecuteBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeginExecuteBatchRequest proto.InternalMessageInfo

func (m *BeginExecuteBatchRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetQueries() []*BoundQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *BeginExecuteBatchRequest) GetAsTransaction() bool {
	if m != nil {
		return m.AsTransaction
	}
	return false
}

func (m *BeginExecuteBatchRequest) GetOptions() *ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// BeginExecuteBatchResponse is the returned value from BeginExecuteBatch
type BeginExecuteBatchResponse struct {
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error   *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Results []*QueryResult  `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId        int64    `protobuf:"varint,3,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeginExecuteBatchResponse) Reset()         { *m = BeginExecuteBatchResponse{} }
func (m *BeginExecuteBatchResponse) String() string { return proto.CompactTextString(m) }
func (*BeginExecuteBatchResponse) ProtoMessage()    {}
func (*BeginExecuteBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{44}
}
func (m *BeginExecuteBatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeginExecuteBatchResponse.Unmarshal(m, b)
}
func (m *BeginExecuteBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeginExecuteBatchResponse.Marshal(b, m, deterministic)
}
func (dst *BeginExecuteBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeginExecuteBatchResponse.Merge(dst, src)
}
func (m *BeginExecuteBatchResponse) XXX_Size() int {
	return xxx_messageInfo_BeginExecuteBatchResponse.Size(m)
}
func (m *BeginExecuteBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeginExecuteBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeginExecuteBatchResponse proto.InternalMessageInfo

func (m *BeginExecuteBatchResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *BeginExecuteBatchResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *BeginExecuteBatchResponse) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

// MessageStreamRequest is the request payload for MessageStream.
type MessageStreamRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	// name is the message table name.
	Name                 string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageStreamRequest) Reset()         { *m = MessageStreamRequest{} }
func (m *MessageStreamRequest) String() string { return proto.CompactTextString(m) }
func (*MessageStreamRequest) ProtoMessage()    {}
func (*MessageStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{45}
}
func (m *MessageStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageStreamRequest.Unmarshal(m, b)
}
func (m *MessageStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageStreamRequest.Marshal(b, m, deterministic)
}
func (dst *MessageStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageStreamRequest.Merge(dst, src)
}
func (m *MessageStreamRequest) XXX_Size() int {
	return xxx_messageInfo_MessageStreamRequest.Size(m)
}
func (m *MessageStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MessageStreamRequest proto.InternalMessageInfo

func (m *MessageStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *MessageStreamRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *MessageStreamRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MessageStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// MessageStreamResponse is a response for MessageStream.
type MessageStreamResponse struct {
	Result               *QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MessageStreamResponse) Reset()         { *m = MessageStreamResponse{} }
func (m *MessageStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MessageStreamResponse) ProtoMessage()    {}
func (*MessageStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{46}
}
func (m *MessageStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageStreamResponse.Unmarshal(m, b)
}
func (m *MessageStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageStreamResponse.Marshal(b, m, deterministic)
}
func (dst *MessageStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageStreamResponse.Merge(dst, src)
}
func (m *MessageStreamResponse) XXX_Size() int {
	return xxx_messageInfo_MessageStreamResponse.Size(m)
}
func (m *MessageStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageStreamResponse proto.InternalMessageInfo

func (m *MessageStreamResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// MessageAckRequest is the request payload for MessageAck.
type MessageAckRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	// name is the message table name.
	Name                 string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Ids                  []*Value `protobuf:"bytes,5,rep,name=ids" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageAckRequest) Reset()         { *m = MessageAckRequest{} }
func (m *MessageAckRequest) String() string { return proto.CompactTextString(m) }
func (*MessageAckRequest) ProtoMessage()    {}
func (*MessageAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{47}
}
func (m *MessageAckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageAckRequest.Unmarshal(m, b)
}
func (m *MessageAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageAckRequest.Marshal(b, m, deterministic)
}
func (dst *MessageAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAckRequest.Merge(dst, src)
}
func (m *MessageAckRequest) XXX_Size() int {
	return xxx_messageInfo_MessageAckRequest.Size(m)
}
func (m *MessageAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAckRequest proto.InternalMessageInfo

func (m *MessageAckRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *MessageAckRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *MessageAckRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MessageAckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MessageAckRequest) GetIds() []*Value {
	if m != nil {
		return m.Ids
	}
	return nil
}

// MessageAckResponse is the response for MessageAck.
type MessageAckResponse struct {
	// result contains the result of the ack operation.
	// Since this acts like a DML, only
	// RowsAffected is returned in the result.
	Result               *QueryResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MessageAckResponse) Reset()         { *m = MessageAckResponse{} }
func (m *MessageAckResponse) String() string { return proto.CompactTextString(m) }
func (*MessageAckResponse) ProtoMessage()    {}
func (*MessageAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{48}
}
func (m *MessageAckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageAckResponse.Unmarshal(m, b)
}
func (m *MessageAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageAckResponse.Marshal(b, m, deterministic)
}
func (dst *MessageAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAckResponse.Merge(dst, src)
}
func (m *MessageAckResponse) XXX_Size() int {
	return xxx_messageInfo_MessageAckResponse.Size(m)
}
func (m *MessageAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAckResponse proto.InternalMessageInfo

func (m *MessageAckResponse) GetResult() *QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// SplitQueryRequest is the payload for SplitQuery sent by VTGate to a VTTablet.
// See vtgate.SplitQueryRequest for more details.
type SplitQueryRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	SplitColumn       []string        `protobuf:"bytes,5,rep,name=split_column,json=splitColumn" json:"split_column,omitempty"`
	// Exactly one of the following must be nonzero.
	SplitCount           int64                       `protobuf:"varint,6,opt,name=split_count,json=splitCount" json:"split_count,omitempty"`
	NumRowsPerQueryPart  int64                       `protobuf:"varint,8,opt,name=num_rows_per_query_part,json=numRowsPerQueryPart" json:"num_rows_per_query_part,omitempty"`
	Algorithm            SplitQueryRequest_Algorithm `protobuf:"varint,9,opt,name=algorithm,enum=query.SplitQueryRequest_Algorithm" json:"algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SplitQueryRequest) Reset()         { *m = SplitQueryRequest{} }
func (m *SplitQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SplitQueryRequest) ProtoMessage()    {}
func (*SplitQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{49}
}
func (m *SplitQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitQueryRequest.Unmarshal(m, b)
}
func (m *SplitQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitQueryRequest.Marshal(b, m, deterministic)
}
func (dst *SplitQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitQueryRequest.Merge(dst, src)
}
func (m *SplitQueryRequest) XXX_Size() int {
	return xxx_messageInfo_SplitQueryRequest.Size(m)
}
func (m *SplitQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SplitQueryRequest proto.InternalMessageInfo

func (m *SplitQueryRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *SplitQueryRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *SplitQueryRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SplitQueryRequest) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SplitQueryRequest) GetSplitColumn() []string {
	if m != nil {
		return m.SplitColumn
	}
	return nil
}

func (m *SplitQueryRequest) GetSplitCount() int64 {
	if m != nil {
		return m.SplitCount
	}
	return 0
}

func (m *SplitQueryRequest) GetNumRowsPerQueryPart() int64 {
	if m != nil {
		return m.NumRowsPerQueryPart
	}
	return 0
}

func (m *SplitQueryRequest) GetAlgorithm() SplitQueryRequest_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return SplitQueryRequest_EQUAL_SPLITS
}

// QuerySplit represents one query to execute on the tablet
type QuerySplit struct {
	// query is the query to execute
	Query *BoundQuery `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	// row_count is the approximate row count the query will return
	RowCount             int64    `protobuf:"varint,2,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySplit) Reset()         { *m = QuerySplit{} }
func (m *QuerySplit) String() string { return proto.CompactTextString(m) }
func (*QuerySplit) ProtoMessage()    {}
func (*QuerySplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{50}
}
func (m *QuerySplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySplit.Unmarshal(m, b)
}
func (m *QuerySplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySplit.Marshal(b, m, deterministic)
}
func (dst *QuerySplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySplit.Merge(dst, src)
}
func (m *QuerySplit) XXX_Size() int {
	return xxx_messageInfo_QuerySplit.Size(m)
}
func (m *QuerySplit) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySplit.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySplit proto.InternalMessageInfo

func (m *QuerySplit) GetQuery() *BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *QuerySplit) GetRowCount() int64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

// SplitQueryResponse is returned by SplitQuery and represents all the queries
// to execute in order to get the entire data set.
type SplitQueryResponse struct {
	Queries              []*QuerySplit `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SplitQueryResponse) Reset()         { *m = SplitQueryResponse{} }
func (m *SplitQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SplitQueryResponse) ProtoMessage()    {}
func (*SplitQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{51}
}
func (m *SplitQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitQueryResponse.Unmarshal(m, b)
}
func (m *SplitQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitQueryResponse.Marshal(b, m, deterministic)
}
func (dst *SplitQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitQueryResponse.Merge(dst, src)
}
func (m *SplitQueryResponse) XXX_Size() int {
	return xxx_messageInfo_SplitQueryResponse.Size(m)
}
func (m *SplitQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SplitQueryResponse proto.InternalMessageInfo

func (m *SplitQueryResponse) GetQueries() []*QuerySplit {
	if m != nil {
		return m.Queries
	}
	return nil
}

// StreamHealthRequest is the payload for StreamHealth
type StreamHealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamHealthRequest) Reset()         { *m = StreamHealthRequest{} }
func (m *StreamHealthRequest) String() string { return proto.CompactTextString(m) }
func (*StreamHealthRequest) ProtoMessage()    {}
func (*StreamHealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{52}
}
func (m *StreamHealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamHealthRequest.Unmarshal(m, b)
}
func (m *StreamHealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamHealthRequest.Marshal(b, m, deterministic)
}
func (dst *StreamHealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamHealthRequest.Merge(dst, src)
}
func (m *StreamHealthRequest) XXX_Size() int {
	return xxx_messageInfo_StreamHealthRequest.Size(m)
}
func (m *StreamHealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamHealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamHealthRequest proto.InternalMessageInfo

// RealtimeStats contains information about the tablet status.
// It is only valid for a single tablet.
type RealtimeStats struct {
	// health_error is the last error we got from health check,
	// or empty is the server is healthy. This is used for subset selection,
	// we do not send queries to servers that are not healthy.
	HealthError string `protobuf:"bytes,1,opt,name=health_error,json=healthError" json:"health_error,omitempty"`
	// seconds_behind_master is populated for slaves only. It indicates
	// how far behind on (MySQL) replication a slave currently is.  It is used
	// by clients for subset selection (so we don't try to send traffic
	// to tablets that are too far behind).
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// TODO(mberlin): Let's switch it to int64 instead?
	SecondsBehindMaster uint32 `protobuf:"varint,2,opt,name=seconds_behind_master,json=secondsBehindMaster" json:"seconds_behind_master,omitempty"`
	// bin_log_players_count is the number of currently running binlog players.
	// if the value is 0, it means that filtered replication is currently not
	// running on the tablet. If >0, filtered replication is running.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	BinlogPlayersCount int32 `protobuf:"varint,3,opt,name=binlog_players_count,json=binlogPlayersCount" json:"binlog_players_count,omitempty"`
	// seconds_behind_master_filtered_replication is populated for the receiving
	// master of an ongoing filtered replication only.
	// It specifies how far the receiving master lags behind the sending master.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// NOTE: This field must not be evaluated if "bin_log_players_count" is 0.
	SecondsBehindMasterFilteredReplication int64 `protobuf:"varint,4,opt,name=seconds_behind_master_filtered_replication,json=secondsBehindMasterFilteredReplication" json:"seconds_behind_master_filtered_replication,omitempty"`
	// cpu_usage is used for load-based balancing
	CpuUsage float64 `protobuf:"fixed64,5,opt,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	// qps is the average QPS (queries per second) rate in the last XX seconds
	// where XX is usually 60 (See query_service_stats.go).
	Qps                  float64  `protobuf:"fixed64,6,opt,name=qps" json:"qps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RealtimeStats) Reset()         { *m = RealtimeStats{} }
func (m *RealtimeStats) String() string { return proto.CompactTextString(m) }
func (*RealtimeStats) ProtoMessage()    {}
func (*RealtimeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{53}
}
func (m *RealtimeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RealtimeStats.Unmarshal(m, b)
}
func (m *RealtimeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RealtimeStats.Marshal(b, m, deterministic)
}
func (dst *RealtimeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RealtimeStats.Merge(dst, src)
}
func (m *RealtimeStats) XXX_Size() int {
	return xxx_messageInfo_RealtimeStats.Size(m)
}
func (m *RealtimeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RealtimeStats.DiscardUnknown(m)
}

var xxx_messageInfo_RealtimeStats proto.InternalMessageInfo

func (m *RealtimeStats) GetHealthError() string {
	if m != nil {
		return m.HealthError
	}
	return ""
}

func (m *RealtimeStats) GetSecondsBehindMaster() uint32 {
	if m != nil {
		return m.SecondsBehindMaster
	}
	return 0
}

func (m *RealtimeStats) GetBinlogPlayersCount() int32 {
	if m != nil {
		return m.BinlogPlayersCount
	}
	return 0
}

func (m *RealtimeStats) GetSecondsBehindMasterFilteredReplication() int64 {
	if m != nil {
		return m.SecondsBehindMasterFilteredReplication
	}
	return 0
}

func (m *RealtimeStats) GetCpuUsage() float64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

func (m *RealtimeStats) GetQps() float64 {
	if m != nil {
		return m.Qps
	}
	return 0
}

// AggregateStats contains information about the health of a group of
// tablets for a Target.  It is used to propagate stats from a vtgate
// to another, or from the Gateway layer of a vtgate to the routing
// layer.
type AggregateStats struct {
	// healthy_tablet_count is the number of healthy tablets in the group.
	HealthyTabletCount int32 `protobuf:"varint,1,opt,name=healthy_tablet_count,json=healthyTabletCount" json:"healthy_tablet_count,omitempty"`
	// unhealthy_tablet_count is the number of unhealthy tablets in the group.
	UnhealthyTabletCount int32 `protobuf:"varint,2,opt,name=unhealthy_tablet_count,json=unhealthyTabletCount" json:"unhealthy_tablet_count,omitempty"`
	// seconds_behind_master_min is the minimum of the
	// seconds_behind_master values of the healthy tablets. It is unset
	// if the tablet type is master.
	SecondsBehindMasterMin uint32 `protobuf:"varint,3,opt,name=seconds_behind_master_min,json=secondsBehindMasterMin" json:"seconds_behind_master_min,omitempty"`
	// seconds_behind_master_max is the maximum of the
	// seconds_behind_master values of the healthy tablets. It is unset
	// if the tablet type is master.
	SecondsBehindMasterMax uint32   `protobuf:"varint,4,opt,name=seconds_behind_master_max,json=secondsBehindMasterMax" json:"seconds_behind_master_max,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *AggregateStats) Reset()         { *m = AggregateStats{} }
func (m *AggregateStats) String() string { return proto.CompactTextString(m) }
func (*AggregateStats) ProtoMessage()    {}
func (*AggregateStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{54}
}
func (m *AggregateStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregateStats.Unmarshal(m, b)
}
func (m *AggregateStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregateStats.Marshal(b, m, deterministic)
}
func (dst *AggregateStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateStats.Merge(dst, src)
}
func (m *AggregateStats) XXX_Size() int {
	return xxx_messageInfo_AggregateStats.Size(m)
}
func (m *AggregateStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateStats.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateStats proto.InternalMessageInfo

func (m *AggregateStats) GetHealthyTabletCount() int32 {
	if m != nil {
		return m.HealthyTabletCount
	}
	return 0
}

func (m *AggregateStats) GetUnhealthyTabletCount() int32 {
	if m != nil {
		return m.UnhealthyTabletCount
	}
	return 0
}

func (m *AggregateStats) GetSecondsBehindMasterMin() uint32 {
	if m != nil {
		return m.SecondsBehindMasterMin
	}
	return 0
}

func (m *AggregateStats) GetSecondsBehindMasterMax() uint32 {
	if m != nil {
		return m.SecondsBehindMasterMax
	}
	return 0
}

// StreamHealthResponse is streamed by StreamHealth on a regular basis.
// When StreamHealth is used between a vtgate and vttablet:
// - target describes the tablet.
// - realtime_stats is set.
// - aggregate_stats is not set.
// When StreamHealth is used between two vtgates:
// - target describes the group of tablets.
// - realtime_stats is not set.
// - aggregate_stats is set.
type StreamHealthResponse struct {
	// target is the current server type. Only queries with that exact Target
	// record will be accepted (the cell may not match, however).
	Target *Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	// serving is true iff the tablet is serving. A tablet may not be serving
	// if filtered replication is enabled on a master for instance,
	// or if a replica should not be used because the keyspace is being resharded.
	Serving bool `protobuf:"varint,2,opt,name=serving" json:"serving,omitempty"`
	// tablet_externally_reparented_timestamp can be interpreted as the
	// last time we knew that this tablet was the MASTER of this shard
	// (if StreamHealthResponse describes a group of tablets, between
	// two vtgates, only one master will be present in the group, and
	// this is this master's value).
	//
	// It is used by vtgate when determining the current MASTER of a shard.
	// If vtgate sees more than one MASTER tablet, this timestamp is used
	// as tiebreaker where the MASTER with the highest timestamp wins.
	// Another usage of this timestamp is in go/vt/vtgate/buffer to detect the end
	// of a reparent (failover) and stop buffering.
	//
	// In practice, this field is set to:
	// a) the last time the RPC tabletmanager.TabletExternallyReparented was
	//    called on this tablet (usually done by an external failover tool e.g.
	//    Orchestrator). The failover tool can call this as long as we are the
	//    master i.e. even ages after the last reparent occurred.
	// OR
	// b) the last time an active reparent was executed through a vtctl command
	//    (InitShardMaster, PlannedReparentShard, EmergencyReparentShard)
	// OR
	// c) the last time vttablet was started and it initialized its tablet type
	//    as MASTER because it was recorded as the shard's current master in the
	//    topology (see go/vt/vttablet/tabletmanager/init_tablet.go)
	// OR
	// d) 0 if the vttablet was never a MASTER.
	TabletExternallyReparentedTimestamp int64 `protobuf:"varint,3,opt,name=tablet_externally_reparented_timestamp,json=tabletExternallyReparentedTimestamp" json:"tablet_externally_reparented_timestamp,omitempty"`
	// realtime_stats contains information about the tablet status.
	// It is only filled in if the information is about a tablet.
	RealtimeStats *RealtimeStats `protobuf:"bytes,4,opt,name=realtime_stats,json=realtimeStats" json:"realtime_stats,omitempty"`
	// AggregateStats constains information about the group of tablet status.
	// It is only filled in if the information is about a group of tablets.
	AggregateStats *AggregateStats `protobuf:"bytes,6,opt,name=aggregate_stats,json=aggregateStats" json:"aggregate_stats,omitempty"`
	// tablet_alias is the alias of the sending tablet. The discovery/healthcheck.go
	// code uses it to verify that it's talking to the correct tablet and that it
	// hasn't changed in the meantime e.g. due to tablet restarts where ports or
	// ips have been reused but assigned differently.
	TabletAlias          *topodata.TabletAlias `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias" json:"tablet_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StreamHealthResponse) Reset()         { *m = StreamHealthResponse{} }
func (m *StreamHealthResponse) String() string { return proto.CompactTextString(m) }
func (*StreamHealthResponse) ProtoMessage()    {}
func (*StreamHealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{55}
}
func (m *StreamHealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamHealthResponse.Unmarshal(m, b)
}
func (m *StreamHealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamHealthResponse.Marshal(b, m, deterministic)
}
func (dst *StreamHealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamHealthResponse.Merge(dst, src)
}
func (m *StreamHealthResponse) XXX_Size() int {
	return xxx_messageInfo_StreamHealthResponse.Size(m)
}
func (m *StreamHealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamHealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamHealthResponse proto.InternalMessageInfo

func (m *StreamHealthResponse) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *StreamHealthResponse) GetServing() bool {
	if m != nil {
		return m.Serving
	}
	return false
}

func (m *StreamHealthResponse) GetTabletExternallyReparentedTimestamp() int64 {
	if m != nil {
		return m.TabletExternallyReparentedTimestamp
	}
	return 0
}

func (m *StreamHealthResponse) GetRealtimeStats() *RealtimeStats {
	if m != nil {
		return m.RealtimeStats
	}
	return nil
}

func (m *StreamHealthResponse) GetAggregateStats() *AggregateStats {
	if m != nil {
		return m.AggregateStats
	}
	return nil
}

func (m *StreamHealthResponse) GetTabletAlias() *topodata.TabletAlias {
	if m != nil {
		return m.TabletAlias
	}
	return nil
}

// UpdateStreamRequest is the payload for UpdateStream. At most one of
// position and timestamp can be set. If neither is set, we will start
// streaming from the current binlog position.
type UpdateStreamRequest struct {
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId" json:"effective_caller_id,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId" json:"immediate_caller_id,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	// If position is set, we will start the streaming from that replication
	// position. Incompatible with timestamp.
	Position string `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	// If timestamp is set, we will start the streaming from the first
	// event in the binlogs that have that timestamp. Incompatible with position.
	Timestamp            int64    `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateStreamRequest) Reset()         { *m = UpdateStreamRequest{} }
func (m *UpdateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStreamRequest) ProtoMessage()    {}
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{56}
}
func (m *UpdateStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateStreamRequest.Unmarshal(m, b)
}
func (m *UpdateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateStreamRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStreamRequest.Merge(dst, src)
}
func (m *UpdateStreamRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateStreamRequest.Size(m)
}
func (m *UpdateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStreamRequest proto.InternalMessageInfo

func (m *UpdateStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.EffectiveCallerId
	}
	return nil
}

func (m *UpdateStreamRequest) GetImmediateCallerId() *VTGateCallerID {
	if m != nil {
		return m.ImmediateCallerId
	}
	return nil
}

func (m *UpdateStreamRequest) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *UpdateStreamRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UpdateStreamRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// UpdateStreamResponse is returned by UpdateStream
type UpdateStreamResponse struct {
	Event                *StreamEvent `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateStreamResponse) Reset()         { *m = UpdateStreamResponse{} }
func (m *UpdateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateStreamResponse) ProtoMessage()    {}
func (*UpdateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{57}
}
func (m *UpdateStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateStreamResponse.Unmarshal(m, b)
}
func (m *UpdateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateStreamResponse.Marshal(b, m, deterministic)
}
func (dst *UpdateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStreamResponse.Merge(dst, src)
}
func (m *UpdateStreamResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateStreamResponse.Size(m)
}
func (m *UpdateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStreamResponse proto.InternalMessageInfo

func (m *UpdateStreamResponse) GetEvent() *StreamEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

// TransactionMetadata contains the metadata for a distributed transaction.
type TransactionMetadata struct {
	Dtid                 string           `protobuf:"bytes,1,opt,name=dtid" json:"dtid,omitempty"`
	State                TransactionState `protobuf:"varint,2,opt,name=state,enum=query.TransactionState" json:"state,omitempty"`
	TimeCreated          int64            `protobuf:"varint,3,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	Participants         []*Target        `protobuf:"bytes,4,rep,name=participants" json:"participants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TransactionMetadata) Reset()         { *m = TransactionMetadata{} }
func (m *TransactionMetadata) String() string { return proto.CompactTextString(m) }
func (*TransactionMetadata) ProtoMessage()    {}
func (*TransactionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_a5d4f89178b1125d, []int{58}
}
func (m *TransactionMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionMetadata.Unmarshal(m, b)
}
func (m *TransactionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionMetadata.Marshal(b, m, deterministic)
}
func (dst *TransactionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionMetadata.Merge(dst, src)
}
func (m *TransactionMetadata) XXX_Size() int {
	return xxx_messageInfo_TransactionMetadata.Size(m)
}
func (m *TransactionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionMetadata proto.InternalMessageInfo

func (m *TransactionMetadata) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

func (m *TransactionMetadata) GetState() TransactionState {
	if m != nil {
		return m.State
	}
	return TransactionState_UNKNOWN
}

func (m *TransactionMetadata) GetTimeCreated() int64 {
	if m != nil {
		return m.TimeCreated
	}
	return 0
}

func (m *TransactionMetadata) GetParticipants() []*Target {
	if m != nil {
		return m.Participants
	}
	return nil
}

func init() {
	proto.RegisterType((*Target)(nil), "query.Target")
	proto.RegisterType((*VTGateCallerID)(nil), "query.VTGateCallerID")
	proto.RegisterType((*EventToken)(nil), "query.EventToken")
	proto.RegisterType((*Value)(nil), "query.Value")
	proto.RegisterType((*BindVariable)(nil), "query.BindVariable")
	proto.RegisterType((*BoundQuery)(nil), "query.BoundQuery")
	proto.RegisterMapType((map[string]*BindVariable)(nil), "query.BoundQuery.BindVariablesEntry")
	proto.RegisterType((*ExecuteOptions)(nil), "query.ExecuteOptions")
	proto.RegisterType((*Field)(nil), "query.Field")
	proto.RegisterType((*Row)(nil), "query.Row")
	proto.RegisterType((*ResultExtras)(nil), "query.ResultExtras")
	proto.RegisterType((*QueryResult)(nil), "query.QueryResult")
	proto.RegisterType((*StreamEvent)(nil), "query.StreamEvent")
	proto.RegisterType((*StreamEvent_Statement)(nil), "query.StreamEvent.Statement")
	proto.RegisterType((*ExecuteRequest)(nil), "query.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "query.ExecuteResponse")
	proto.RegisterType((*ResultWithError)(nil), "query.ResultWithError")
	proto.RegisterType((*ExecuteBatchRequest)(nil), "query.ExecuteBatchRequest")
	proto.RegisterType((*ExecuteBatchResponse)(nil), "query.ExecuteBatchResponse")
	proto.RegisterType((*StreamExecuteRequest)(nil), "query.StreamExecuteRequest")
	proto.RegisterType((*StreamExecuteResponse)(nil), "query.StreamExecuteResponse")
	proto.RegisterType((*BeginRequest)(nil), "query.BeginRequest")
	proto.RegisterType((*BeginResponse)(nil), "query.BeginResponse")
	proto.RegisterType((*CommitRequest)(nil), "query.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "query.CommitResponse")
	proto.RegisterType((*RollbackRequest)(nil), "query.RollbackRequest")
	proto.RegisterType((*RollbackResponse)(nil), "query.RollbackResponse")
	proto.RegisterType((*PrepareRequest)(nil), "query.PrepareRequest")
	proto.RegisterType((*PrepareResponse)(nil), "query.PrepareResponse")
	proto.RegisterType((*CommitPreparedRequest)(nil), "query.CommitPreparedRequest")
	proto.RegisterType((*CommitPreparedResponse)(nil), "query.CommitPreparedResponse")
	proto.RegisterType((*RollbackPreparedRequest)(nil), "query.RollbackPreparedRequest")
	proto.RegisterType((*RollbackPreparedResponse)(nil), "query.RollbackPreparedResponse")
	proto.RegisterType((*CreateTransactionRequest)(nil), "query.CreateTransactionRequest")
	proto.RegisterType((*CreateTransactionResponse)(nil), "query.CreateTransactionResponse")
	proto.RegisterType((*StartCommitRequest)(nil), "query.StartCommitRequest")
	proto.RegisterType((*StartCommitResponse)(nil), "query.StartCommitResponse")
	proto.RegisterType((*SetRollbackRequest)(nil), "query.SetRollbackRequest")
	proto.RegisterType((*SetRollbackResponse)(nil), "query.SetRollbackResponse")
	proto.RegisterType((*ConcludeTransactionRequest)(nil), "query.ConcludeTransactionRequest")
	proto.RegisterType((*ConcludeTransactionResponse)(nil), "query.ConcludeTransactionResponse")
	proto.RegisterType((*ReadTransactionRequest)(nil), "query.ReadTransactionRequest")
	proto.RegisterType((*ReadTransactionResponse)(nil), "query.ReadTransactionResponse")
	proto.RegisterType((*BeginExecuteRequest)(nil), "query.BeginExecuteRequest")
	proto.RegisterType((*BeginExecuteResponse)(nil), "query.BeginExecuteResponse")
	proto.RegisterType((*BeginExecuteBatchRequest)(nil), "query.BeginExecuteBatchRequest")
	proto.RegisterType((*BeginExecuteBatchResponse)(nil), "query.BeginExecuteBatchResponse")
	proto.RegisterType((*MessageStreamRequest)(nil), "query.MessageStreamRequest")
	proto.RegisterType((*MessageStreamResponse)(nil), "query.MessageStreamResponse")
	proto.RegisterType((*MessageAckRequest)(nil), "query.MessageAckRequest")
	proto.RegisterType((*MessageAckResponse)(nil), "query.MessageAckResponse")
	proto.RegisterType((*SplitQueryRequest)(nil), "query.SplitQueryRequest")
	proto.RegisterType((*QuerySplit)(nil), "query.QuerySplit")
	proto.RegisterType((*SplitQueryResponse)(nil), "query.SplitQueryResponse")
	proto.RegisterType((*StreamHealthRequest)(nil), "query.StreamHealthRequest")
	proto.RegisterType((*RealtimeStats)(nil), "query.RealtimeStats")
	proto.RegisterType((*AggregateStats)(nil), "query.AggregateStats")
	proto.RegisterType((*StreamHealthResponse)(nil), "query.StreamHealthResponse")
	proto.RegisterType((*UpdateStreamRequest)(nil), "query.UpdateStreamRequest")
	proto.RegisterType((*UpdateStreamResponse)(nil), "query.UpdateStreamResponse")
	proto.RegisterType((*TransactionMetadata)(nil), "query.TransactionMetadata")
	proto.RegisterEnum("query.MySqlFlag", MySqlFlag_name, MySqlFlag_value)
	proto.RegisterEnum("query.Flag", Flag_name, Flag_value)
	proto.RegisterEnum("query.Type", Type_name, Type_value)
	proto.RegisterEnum("query.TransactionState", TransactionState_name, TransactionState_value)
	proto.RegisterEnum("query.ExecuteOptions_IncludedFields", ExecuteOptions_IncludedFields_name, ExecuteOptions_IncludedFields_value)
	proto.RegisterEnum("query.ExecuteOptions_Workload", ExecuteOptions_Workload_name, ExecuteOptions_Workload_value)
	proto.RegisterEnum("query.ExecuteOptions_TransactionIsolation", ExecuteOptions_TransactionIsolation_name, ExecuteOptions_TransactionIsolation_value)
	proto.RegisterEnum("query.StreamEvent_Statement_Category", StreamEvent_Statement_Category_name, StreamEvent_Statement_Category_value)
	proto.RegisterEnum("query.SplitQueryRequest_Algorithm", SplitQueryRequest_Algorithm_name, SplitQueryRequest_Algorithm_value)
}

func init() { proto.RegisterFile("query.proto", fileDescriptor_query_a5d4f89178b1125d) }

var fileDescriptor_query_a5d4f89178b1125d = []byte{
	// 3229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4b, 0x73, 0x1b, 0xcb,
	0x75, 0xd6, 0xe0, 0x45, 0xe0, 0x80, 0x00, 0x9b, 0x0d, 0x52, 0x82, 0xa8, 0xfb, 0xa0, 0xc7, 0x96,
	0xcd, 0xd0, 0x0e, 0xa5, 0x4b, 0xc9, 0x8a, 0x72, 0x9d, 0x38, 0x1a, 0x82, 0x43, 0x5d, 0x58, 0xc0,
	0x00, 0x6a, 0x0c, 0x24, 0x4b, 0xe5, 0xaa, 0xa9, 0x21, 0xd0, 0x02, 0xa7, 0x38, 0xc0, 0x40, 0x33,
	0x03, 0x52, 0xdc, 0x29, 0x71, 0x9c, 0x77, 0xe2, 0x9b, 0xa7, 0xe2, 0xa4, 0x72, 0x2b, 0x55, 0xd9,
	0xe7, 0x37, 0xa4, 0xb2, 0xc8, 0x32, 0xbb, 0x2c, 0x92, 0x2c, 0xb2, 0x48, 0xa5, 0xb2, 0x73, 0x65,
	0x95, 0x45, 0x16, 0xa9, 0x54, 0x3f, 0x66, 0x30, 0x20, 0xa1, 0xc7, 0x55, 0xbc, 0xa1, 0xee, 0xdd,
	0x75, 0x9f, 0x73, 0xfa, 0xf1, 0x7d, 0xe7, 0xcc, 0xe9, 0x9e, 0xee, 0x86, 0xe2, 0xd3, 0x09, 0xf5,
	0x4f, 0xb6, 0xc6, 0xbe, 0x17, 0x7a, 0x38, 0xcb, 0x2b, 0x6b, 0xe5, 0xd0, 0x1b, 0x7b, 0x7d, 0x3b,
	0xb4, 0x85, 0x78, 0xad, 0x78, 0x14, 0xfa, 0xe3, 0x9e, 0xa8, 0xa8, 0x3f, 0x52, 0x20, 0x67, 0xda,
	0xfe, 0x80, 0x86, 0x78, 0x0d, 0xf2, 0x87, 0xf4, 0x24, 0x18, 0xdb, 0x3d, 0x5a, 0x55, 0xd6, 0x95,
	0x8d, 0x02, 0x89, 0xeb, 0x78, 0x05, 0xb2, 0xc1, 0x81, 0xed, 0xf7, 0xab, 0x29, 0xae, 0x10, 0x15,
	0xfc, 0x6d, 0x28, 0x86, 0xf6, 0xbe, 0x4b, 0x43, 0x2b, 0x3c, 0x19, 0xd3, 0x6a, 0x7a, 0x5d, 0xd9,
	0x28, 0x6f, 0xaf, 0x6c, 0xc5, 0xe3, 0x99, 0x5c, 0x69, 0x9e, 0x8c, 0x29, 0x81, 0x30, 0x2e, 0x63,
	0x0c, 0x99, 0x1e, 0x75, 0xdd, 0x6a, 0x86, 0xf7, 0xc5, 0xcb, 0xea, 0x2e, 0x94, 0x1f, 0x98, 0x77,
	0xed, 0x90, 0xd6, 0x6c, 0xd7, 0xa5, 0x7e, 0x7d, 0x97, 0x4d, 0x67, 0x12, 0x50, 0x7f, 0x64, 0x0f,
	0xe3, 0xe9, 0x44, 0x75, 0x7c, 0x11, 0x72, 0x03, 0xdf, 0x9b, 0x8c, 0x83, 0x6a, 0x6a, 0x3d, 0xbd,
	0x51, 0x20, 0xb2, 0xa6, 0xfe, 0x00, 0x40, 0x3f, 0xa2, 0xa3, 0xd0, 0xf4, 0x0e, 0xe9, 0x08, 0xbf,
	0x07, 0x85, 0xd0, 0x19, 0xd2, 0x20, 0xb4, 0x87, 0x63, 0xde, 0x45, 0x9a, 0x4c, 0x05, 0x2f, 0x81,
	0xb4, 0x06, 0xf9, 0xb1, 0x17, 0x38, 0xa1, 0xe3, 0x8d, 0x38, 0x9e, 0x02, 0x89, 0xeb, 0xea, 0x77,
	0x21, 0xfb, 0xc0, 0x76, 0x27, 0x14, 0x7f, 0x08, 0x19, 0x0e, 0x58, 0xe1, 0x80, 0x8b, 0x5b, 0x82,
	0x74, 0x8e, 0x93, 0x2b, 0x58, 0xdf, 0x47, 0xcc, 0x92, 0xf7, 0xbd, 0x48, 0x44, 0x45, 0x3d, 0x84,
	0xc5, 0x1d, 0x67, 0xd4, 0x7f, 0x60, 0xfb, 0x0e, 0x23, 0xe3, 0x2d, 0xbb, 0xc1, 0x5f, 0x83, 0x1c,
	0x2f, 0x04, 0xd5, 0xf4, 0x7a, 0x7a, 0xa3, 0xb8, 0xbd, 0x28, 0x1b, 0xf2, 0xb9, 0x11, 0xa9, 0x53,
	0xff, 0x5e, 0x01, 0xd8, 0xf1, 0x26, 0xa3, 0xfe, 0x7d, 0xa6, 0xc4, 0x08, 0xd2, 0xc1, 0x53, 0x57,
	0x12, 0xc9, 0x8a, 0xf8, 0x1e, 0x94, 0xf7, 0x9d, 0x51, 0xdf, 0x3a, 0x92, 0xd3, 0x11, 0x5c, 0x16,
	0xb7, 0xbf, 0x26, 0xbb, 0x9b, 0x36, 0xde, 0x4a, 0xce, 0x3a, 0xd0, 0x47, 0xa1, 0x7f, 0x42, 0x4a,
	0xfb, 0x49, 0xd9, 0x5a, 0x17, 0xf0, 0x59, 0x23, 0x36, 0xe8, 0x21, 0x3d, 0x89, 0x06, 0x3d, 0xa4,
	0x27, 0xf8, 0xe7, 0x92, 0x88, 0x8a, 0xdb, 0x95, 0x68, 0xac, 0x44, 0x5b, 0x09, 0xf3, 0xe3, 0xd4,
	0x6d, 0x45, 0xfd, 0x71, 0x0e, 0xca, 0xfa, 0x33, 0xda, 0x9b, 0x84, 0xb4, 0x35, 0x66, 0x3e, 0x08,
	0xf0, 0x16, 0x54, 0x9c, 0x51, 0xcf, 0x9d, 0xf4, 0xa9, 0x45, 0x99, 0xab, 0xad, 0x90, 0xf9, 0x9a,
	0xf7, 0x97, 0x27, 0xcb, 0x52, 0x95, 0x08, 0x02, 0x0d, 0x2a, 0x3d, 0x6f, 0x38, 0xb6, 0xfd, 0x59,
	0xfb, 0x34, 0x1f, 0x7f, 0x59, 0x8e, 0x3f, 0xb5, 0x27, 0xcb, 0xd2, 0x3a, 0xd1, 0x45, 0x13, 0x96,
	0x64, 0xbf, 0x7d, 0xeb, 0x89, 0x43, 0xdd, 0x7e, 0xc0, 0x43, 0xb7, 0x1c, 0x53, 0x35, 0x3b, 0xc5,
	0xad, 0xba, 0x34, 0xde, 0xe3, 0xb6, 0xa4, 0xec, 0xcc, 0xd4, 0xf1, 0x26, 0x2c, 0xf7, 0x5c, 0x87,
	0x4d, 0xe5, 0x09, 0xa3, 0xd8, 0xf2, 0xbd, 0xe3, 0xa0, 0x9a, 0xe5, 0xf3, 0x5f, 0x12, 0x8a, 0x3d,
	0x26, 0x27, 0xde, 0x71, 0x80, 0x3f, 0x86, 0xfc, 0xb1, 0xe7, 0x1f, 0xba, 0x9e, 0xdd, 0xaf, 0xe6,
	0xf8, 0x98, 0x1f, 0xcc, 0x1f, 0xf3, 0xa1, 0xb4, 0x22, 0xb1, 0x3d, 0xde, 0x00, 0x14, 0x3c, 0x75,
	0xad, 0x80, 0xba, 0xb4, 0x17, 0x5a, 0xae, 0x33, 0x74, 0xc2, 0x6a, 0x9e, 0x7f, 0x05, 0xe5, 0xe0,
	0xa9, 0xdb, 0xe1, 0xe2, 0x06, 0x93, 0x62, 0x0b, 0x56, 0x43, 0xdf, 0x1e, 0x05, 0x76, 0x8f, 0x75,
	0x66, 0x39, 0x81, 0xe7, 0xda, 0xfc, 0x0b, 0x28, 0xf0, 0x21, 0x37, 0xe7, 0x0f, 0x69, 0x4e, 0x9b,
	0xd4, 0xa3, 0x16, 0x64, 0x25, 0x9c, 0x23, 0xc5, 0x1f, 0xc1, 0x6a, 0x70, 0xe8, 0x8c, 0x2d, 0xde,
	0x8f, 0x35, 0x76, 0xed, 0x91, 0xd5, 0xb3, 0x7b, 0x07, 0xb4, 0x0a, 0x1c, 0x36, 0x66, 0x4a, 0x1e,
	0x6a, 0x6d, 0xd7, 0x1e, 0xd5, 0x98, 0x46, 0xfd, 0x0e, 0x94, 0x67, 0x79, 0xc4, 0xcb, 0x50, 0x32,
	0x1f, 0xb5, 0x75, 0x4b, 0x33, 0x76, 0x2d, 0x43, 0x6b, 0xea, 0xe8, 0x02, 0x2e, 0x41, 0x81, 0x8b,
	0x5a, 0x46, 0xe3, 0x11, 0x52, 0xf0, 0x02, 0xa4, 0xb5, 0x46, 0x03, 0xa5, 0xd4, 0xdb, 0x90, 0x8f,
	0x08, 0xc1, 0x4b, 0x50, 0xec, 0x1a, 0x9d, 0xb6, 0x5e, 0xab, 0xef, 0xd5, 0xf5, 0x5d, 0x74, 0x01,
	0xe7, 0x21, 0xd3, 0x6a, 0x98, 0x6d, 0xa4, 0x88, 0x92, 0xd6, 0x46, 0x29, 0xd6, 0x72, 0x77, 0x47,
	0x43, 0x69, 0xf5, 0x85, 0x02, 0x2b, 0xf3, 0x80, 0xe1, 0x22, 0x2c, 0xec, 0xea, 0x7b, 0x5a, 0xb7,
	0x61, 0xa2, 0x0b, 0xb8, 0x02, 0x4b, 0x44, 0x6f, 0xeb, 0x9a, 0xa9, 0xed, 0x34, 0x74, 0x8b, 0xe8,
	0xda, 0x2e, 0x52, 0x30, 0x86, 0x32, 0x2b, 0x59, 0xb5, 0x56, 0xb3, 0x59, 0x37, 0x4d, 0x7d, 0x17,
	0xa5, 0xf0, 0x0a, 0x20, 0x2e, 0xeb, 0x1a, 0x53, 0x69, 0x1a, 0x23, 0x58, 0xec, 0xe8, 0xa4, 0xae,
	0x35, 0xea, 0x8f, 0x59, 0x07, 0x28, 0x83, 0xbf, 0x02, 0xef, 0xd7, 0x5a, 0x46, 0xa7, 0xde, 0x31,
	0x75, 0xc3, 0xb4, 0x3a, 0x86, 0xd6, 0xee, 0x7c, 0xd2, 0x32, 0x79, 0xcf, 0x02, 0x5c, 0xf6, 0x7b,
	0x99, 0xbc, 0x82, 0x52, 0xea, 0x8b, 0x14, 0x64, 0x39, 0x1f, 0x2c, 0x8b, 0x26, 0x72, 0x23, 0x2f,
	0xc7, 0x19, 0x25, 0xf5, 0x8a, 0x8c, 0xc2, 0x13, 0xb1, 0xcc, 0x6d, 0xa2, 0x82, 0xaf, 0x40, 0xc1,
	0xf3, 0x07, 0x96, 0xd0, 0x88, 0xac, 0x9c, 0xf7, 0xfc, 0x01, 0x4f, 0xdf, 0x2c, 0x23, 0xb2, 0x64,
	0xbe, 0x6f, 0x07, 0x94, 0x47, 0x69, 0x81, 0xc4, 0x75, 0x7c, 0x19, 0x98, 0x9d, 0xc5, 0xe7, 0x91,
	0xe3, 0xba, 0x05, 0xcf, 0x1f, 0x18, 0x6c, 0x2a, 0x5f, 0x85, 0x52, 0xcf, 0x73, 0x27, 0xc3, 0x91,
	0xe5, 0xd2, 0xd1, 0x20, 0x3c, 0xa8, 0x2e, 0xac, 0x2b, 0x1b, 0x25, 0xb2, 0x28, 0x84, 0x0d, 0x2e,
	0xc3, 0x55, 0x58, 0xe8, 0x1d, 0xd8, 0x7e, 0x40, 0x45, 0x64, 0x96, 0x48, 0x54, 0xe5, 0xa3, 0xd2,
	0x9e, 0x33, 0xb4, 0xdd, 0x80, 0x47, 0x61, 0x89, 0xc4, 0x75, 0x06, 0xe2, 0x89, 0x6b, 0x0f, 0x02,
	0x1e, 0x3d, 0x25, 0x22, 0x2a, 0xea, 0x2f, 0x40, 0x9a, 0x78, 0xc7, 0xac, 0x4b, 0x31, 0x60, 0x50,
	0x55, 0xd6, 0xd3, 0x1b, 0x98, 0x44, 0x55, 0xb6, 0x68, 0xc8, 0xbc, 0x29, 0xd2, 0x69, 0x94, 0x29,
	0x7f, 0x00, 0x8b, 0x84, 0x06, 0x13, 0x37, 0xd4, 0x9f, 0x85, 0xbe, 0x1d, 0xe0, 0x6d, 0x28, 0x26,
	0x33, 0x85, 0xf2, 0xb2, 0x4c, 0x01, 0x74, 0x9a, 0x22, 0xaa, 0xb0, 0xf0, 0xc4, 0xa7, 0xc1, 0x01,
	0xf5, 0x65, 0x26, 0x8a, 0xaa, 0x2c, 0x0f, 0x17, 0x79, 0x68, 0x8b, 0x31, 0x58, 0xf6, 0x96, 0x39,
	0x44, 0x99, 0xc9, 0xde, 0xdc, 0xa9, 0x44, 0xea, 0x18, 0x7b, 0x2c, 0x2d, 0x58, 0xf6, 0x93, 0x27,
	0xb4, 0x17, 0x52, 0xb1, 0x48, 0x65, 0xc8, 0x22, 0x13, 0x6a, 0x52, 0xc6, 0xdc, 0xe6, 0x8c, 0x02,
	0xea, 0x87, 0x96, 0xd3, 0xe7, 0x0e, 0xcd, 0x90, 0xbc, 0x10, 0xd4, 0xfb, 0xf8, 0x03, 0xc8, 0xf0,
	0xc4, 0x92, 0xe1, 0xa3, 0x80, 0x1c, 0x85, 0x78, 0xc7, 0x84, 0xcb, 0xf1, 0x37, 0x21, 0x47, 0x39,
	0x5e, 0xee, 0xd4, 0x69, 0x2a, 0x4e, 0x52, 0x41, 0xa4, 0x89, 0xfa, 0xd7, 0x69, 0x28, 0x76, 0x42,
	0x9f, 0xda, 0x43, 0x8e, 0x1f, 0xff, 0x12, 0x40, 0x10, 0xda, 0x21, 0x1d, 0xd2, 0x51, 0x18, 0x01,
	0x79, 0x4f, 0x76, 0x90, 0xb0, 0xdb, 0xea, 0x44, 0x46, 0x24, 0x61, 0x7f, 0x9a, 0xe0, 0xd4, 0x1b,
	0x10, 0xbc, 0xf6, 0x59, 0x0a, 0x0a, 0x71, 0x6f, 0x58, 0x83, 0x7c, 0xcf, 0x0e, 0xe9, 0xc0, 0xf3,
	0x4f, 0xe4, 0xea, 0x79, 0xf5, 0x55, 0xa3, 0x6f, 0xd5, 0xa4, 0x31, 0x89, 0x9b, 0xe1, 0xf7, 0x41,
	0x6c, 0x49, 0x44, 0xf0, 0x8a, 0x3d, 0x40, 0x81, 0x4b, 0x78, 0xf8, 0x7e, 0x0c, 0x78, 0xec, 0x3b,
	0x43, 0xdb, 0x3f, 0xb1, 0x0e, 0xe9, 0x49, 0x94, 0xf6, 0xd3, 0x73, 0x5c, 0x86, 0xa4, 0xdd, 0x3d,
	0x7a, 0x22, 0x13, 0xd5, 0xed, 0xd9, 0xb6, 0x32, 0xe8, 0xce, 0x3a, 0x22, 0xd1, 0x92, 0xaf, 0xdd,
	0x41, 0xb4, 0x4a, 0x67, 0x79, 0x7c, 0xb2, 0xa2, 0xfa, 0x0d, 0xc8, 0x47, 0x93, 0xc7, 0x05, 0xc8,
	0xea, 0xbe, 0xef, 0xf9, 0xe8, 0x02, 0xcf, 0x57, 0xcd, 0x86, 0x48, 0x79, 0xbb, 0xbb, 0x2c, 0xe5,
	0xfd, 0x5d, 0x2a, 0x5e, 0x2a, 0x09, 0x7d, 0x3a, 0xa1, 0x41, 0x88, 0x7f, 0x05, 0x2a, 0x94, 0xc7,
	0x8a, 0x73, 0x44, 0xad, 0x1e, 0xdf, 0x57, 0xb1, 0x48, 0x11, 0x01, 0xbd, 0xb4, 0x25, 0xb6, 0x81,
	0xd1, 0x7e, 0x8b, 0x2c, 0xc7, 0xb6, 0x52, 0xd4, 0xc7, 0x3a, 0x54, 0x9c, 0xe1, 0x90, 0xf6, 0x1d,
	0x3b, 0x4c, 0x76, 0x20, 0x1c, 0xb6, 0x1a, 0x6d, 0x3b, 0x66, 0xb6, 0x6d, 0x64, 0x39, 0x6e, 0x11,
	0x77, 0x73, 0x15, 0x72, 0x21, 0xdf, 0x62, 0xca, 0x55, 0xb7, 0x14, 0xe5, 0x25, 0x2e, 0x24, 0x52,
	0x89, 0xbf, 0x01, 0x62, 0xc3, 0xca, 0x33, 0xd0, 0x34, 0x20, 0xa6, 0xfb, 0x10, 0x22, 0xf4, 0xf8,
	0x2a, 0x94, 0x67, 0x96, 0xab, 0x3e, 0x27, 0x2c, 0x4d, 0x4a, 0xc9, 0xb5, 0xa7, 0x8f, 0xaf, 0xc1,
	0x82, 0x27, 0x96, 0x2a, 0x9e, 0x9b, 0xa6, 0x33, 0x9e, 0x5d, 0xc7, 0x48, 0x64, 0xa5, 0xfe, 0x32,
	0x2c, 0xc5, 0x0c, 0x06, 0x63, 0x6f, 0x14, 0x50, 0xbc, 0x09, 0x39, 0x9f, 0x7f, 0x10, 0x92, 0x35,
	0x2c, 0xbb, 0x48, 0x7c, 0xd1, 0x44, 0x5a, 0xa8, 0x7d, 0x58, 0x12, 0x92, 0x87, 0x4e, 0x78, 0xc0,
	0x1d, 0x85, 0xaf, 0x42, 0x96, 0xb2, 0xc2, 0x29, 0xce, 0x49, 0xbb, 0xc6, 0xf5, 0x44, 0x68, 0x13,
	0xa3, 0xa4, 0x5e, 0x3b, 0xca, 0x7f, 0xa5, 0xa0, 0x22, 0x67, 0xb9, 0x63, 0x87, 0xbd, 0x83, 0x73,
	0xea, 0xec, 0x6f, 0xc2, 0x02, 0x93, 0x3b, 0xf1, 0x87, 0x31, 0xc7, 0xdd, 0x91, 0x05, 0x73, 0xb8,
	0x1d, 0x58, 0x09, 0xef, 0xca, 0xed, 0x52, 0xc9, 0x0e, 0x12, 0x6b, 0xf5, 0x9c, 0xb8, 0xc8, 0xbd,
	0x26, 0x2e, 0x16, 0xde, 0x28, 0x2e, 0x76, 0x61, 0x65, 0x96, 0x71, 0x19, 0x1c, 0xdf, 0x82, 0x05,
	0xe1, 0x94, 0x28, 0x05, 0xce, 0xf3, 0x5b, 0x64, 0xa2, 0xfe, 0x43, 0x0a, 0x56, 0x64, 0x76, 0xfa,
	0x62, 0x7c, 0xa6, 0x09, 0x9e, 0xb3, 0x6f, 0xc2, 0xf3, 0x1b, 0xfa, 0x4f, 0xad, 0xc1, 0xea, 0x29,
	0x1e, 0xdf, 0xe2, 0x63, 0xfd, 0xa9, 0x02, 0x8b, 0x3b, 0x74, 0xe0, 0x8c, 0xce, 0xa9, 0x17, 0x12,
	0xe4, 0x66, 0xde, 0x28, 0x88, 0x6f, 0x41, 0x49, 0xe2, 0x95, 0x6c, 0x9d, 0x65, 0x5b, 0x99, 0xc7,
	0xf6, 0x7f, 0x28, 0x50, 0xaa, 0x79, 0xc3, 0xa1, 0x13, 0x9e, 0x53, 0xa6, 0xce, 0xe2, 0xcc, 0xcc,
	0xc3, 0x89, 0xa0, 0x1c, 0xc1, 0x14, 0x04, 0xa9, 0xff, 0xa9, 0xc0, 0x12, 0xf1, 0x5c, 0x77, 0xdf,
	0xee, 0x1d, 0xbe, 0xdb, 0xd8, 0x31, 0xa0, 0x29, 0x50, 0x89, 0xfe, 0x7f, 0x14, 0x28, 0xb7, 0x7d,
	0xca, 0x7e, 0x85, 0xdf, 0x69, 0xf0, 0xec, 0x3f, 0xaa, 0x1f, 0xca, 0x3d, 0x44, 0x81, 0xf0, 0xb2,
	0xba, 0x0c, 0x4b, 0x31, 0x76, 0xc9, 0xc7, 0xbf, 0x28, 0xb0, 0x2a, 0x02, 0x44, 0x6a, 0xfa, 0xe7,
	0x94, 0x96, 0x08, 0x6f, 0x26, 0x81, 0xb7, 0x0a, 0x17, 0x4f, 0x63, 0x93, 0xb0, 0x7f, 0x98, 0x82,
	0x4b, 0x51, 0x6c, 0x9c, 0x73, 0xe0, 0xff, 0x8f, 0x78, 0x58, 0x83, 0xea, 0x59, 0x12, 0x24, 0x43,
	0x9f, 0xa6, 0xa0, 0x5a, 0xf3, 0xa9, 0x1d, 0xd2, 0xc4, 0x5e, 0xe4, 0xdd, 0x89, 0x0d, 0xfc, 0x11,
	0x2c, 0x8e, 0x6d, 0x3f, 0x74, 0x7a, 0xce, 0xd8, 0x66, 0x7f, 0x7b, 0x59, 0xbe, 0xd5, 0x39, 0xd5,
	0xc1, 0x8c, 0x89, 0x7a, 0x05, 0x2e, 0xcf, 0x61, 0x44, 0xf2, 0xf5, 0xbf, 0x0a, 0xe0, 0x4e, 0x68,
	0xfb, 0xe1, 0x17, 0x60, 0x55, 0x99, 0x1b, 0x4c, 0xab, 0x50, 0x99, 0xc1, 0x9f, 0xe4, 0x85, 0x86,
	0x5f, 0x88, 0x15, 0xe7, 0xa5, 0xbc, 0x24, 0xf1, 0x4b, 0x5e, 0xfe, 0x4d, 0x81, 0xb5, 0x9a, 0x27,
	0x8e, 0x02, 0xdf, 0xc9, 0x2f, 0x4c, 0x7d, 0x1f, 0xae, 0xcc, 0x05, 0x28, 0x09, 0xf8, 0x57, 0x05,
	0x2e, 0x12, 0x6a, 0xf7, 0xdf, 0x4d, 0xf0, 0xf7, 0xe1, 0xd2, 0x19, 0x70, 0x72, 0x87, 0x7a, 0x0b,
	0xf2, 0x43, 0x1a, 0xda, 0x7d, 0x3b, 0xb4, 0x25, 0xa4, 0xb5, 0xa8, 0xdf, 0xa9, 0x75, 0x53, 0x5a,
	0x90, 0xd8, 0x56, 0xfd, 0x2c, 0x05, 0x15, 0xbe, 0xd7, 0xfd, 0xf2, 0x47, 0x6b, 0xfe, 0xbf, 0xc0,
	0xa7, 0x0a, 0xac, 0xcc, 0x12, 0x14, 0xff, 0x13, 0xfc, 0xac, 0xcf, 0x2b, 0xe6, 0x24, 0x84, 0xf4,
	0xbc, 0x2d, 0xe8, 0x3f, 0xa6, 0xa0, 0x9a, 0x9c, 0xd2, 0x97, 0x67, 0x1b, 0xb3, 0x67, 0x1b, 0x9f,
	0xfb, 0x30, 0xeb, 0x85, 0x02, 0x97, 0xe7, 0x10, 0xfa, 0xf9, 0x1c, 0x9d, 0x38, 0xe1, 0x48, 0xbd,
	0xf6, 0x84, 0xe3, 0x4d, 0x5d, 0xfd, 0xcf, 0x0a, 0xac, 0x34, 0x69, 0x10, 0xd8, 0x03, 0x2a, 0xfe,
	0xe3, 0xcf, 0x6f, 0x36, 0xe3, 0x67, 0xc7, 0x99, 0xe9, 0x05, 0x8c, 0x5a, 0x83, 0xd5, 0x53, 0xd0,
	0xde, 0xe2, 0x6c, 0xe2, 0xbf, 0x15, 0x58, 0x96, 0xbd, 0x68, 0xe7, 0x76, 0x23, 0x30, 0x87, 0x1d,
	0xfc, 0x01, 0xa4, 0x9d, 0x7e, 0xb4, 0x83, 0x9c, 0xbd, 0xb6, 0x66, 0x0a, 0xf5, 0x0e, 0xe0, 0x24,
	0xee, 0xb7, 0xa0, 0xee, 0x9f, 0xd2, 0xb0, 0xdc, 0x19, 0xbb, 0x4e, 0x28, 0x95, 0xef, 0x76, 0xe2,
	0xff, 0x0a, 0x2c, 0x06, 0x0c, 0xac, 0x25, 0x2e, 0xd5, 0x38, 0xb1, 0x05, 0x52, 0xe4, 0xb2, 0x1a,
	0x17, 0xe1, 0x0f, 0xa1, 0x18, 0x99, 0x4c, 0x46, 0xa1, 0x3c, 0x50, 0x03, 0x69, 0x31, 0x19, 0x85,
	0xf8, 0x26, 0x5c, 0x1a, 0x4d, 0x86, 0xfc, 0x12, 0xda, 0x1a, 0x53, 0x3f, 0xba, 0xa2, 0xb5, 0xfd,
	0xe8, 0xb2, 0xb8, 0x32, 0x9a, 0x0c, 0x89, 0x77, 0x1c, 0xb4, 0xa9, 0x2f, 0xae, 0x68, 0x6d, 0x3f,
	0xc4, 0x77, 0xa0, 0x60, 0xbb, 0x03, 0xcf, 0x77, 0xc2, 0x83, 0xa1, 0xbc, 0x25, 0x56, 0xa3, 0x1b,
	0x98, 0xd3, 0xf4, 0x6f, 0x69, 0x91, 0x25, 0x99, 0x36, 0x52, 0xbf, 0x05, 0x85, 0x58, 0x8e, 0x11,
	0x2c, 0xea, 0xf7, 0xbb, 0x5a, 0xc3, 0xea, 0xb4, 0x1b, 0x75, 0xb3, 0x23, 0x6e, 0x76, 0xf7, 0xba,
	0x8d, 0x86, 0xd5, 0xa9, 0x69, 0x06, 0x52, 0x54, 0x02, 0xc0, 0xbb, 0xe4, 0x9d, 0x4f, 0x09, 0x52,
	0x5e, 0x43, 0xd0, 0x15, 0x28, 0xf8, 0xde, 0xb1, 0xc4, 0x9e, 0xe2, 0x70, 0xf2, 0xbe, 0x77, 0xcc,
	0x91, 0xab, 0x1a, 0xe0, 0xe4, 0x5c, 0x65, 0xb4, 0x25, 0x92, 0xb7, 0x32, 0x93, 0xbc, 0xa7, 0xe3,
	0xc7, 0xc9, 0x5b, 0x6c, 0xe5, 0xd9, 0x77, 0xfe, 0x09, 0xb5, 0xdd, 0x30, 0x5a, 0xaf, 0xd4, 0xbf,
	0x49, 0x41, 0x89, 0x30, 0x89, 0x33, 0xa4, 0x9d, 0xd0, 0x0e, 0x03, 0xe6, 0xa9, 0x03, 0x6e, 0x62,
	0x4d, 0xd3, 0x6e, 0x81, 0x14, 0x85, 0x4c, 0xdc, 0x15, 0x6c, 0xc3, 0x6a, 0x40, 0x7b, 0xde, 0xa8,
	0x1f, 0x58, 0xfb, 0xf4, 0xc0, 0x19, 0xf5, 0xad, 0xa1, 0x1d, 0x84, 0xf2, 0x42, 0xb1, 0x44, 0x2a,
	0x52, 0xb9, 0xc3, 0x75, 0x4d, 0xae, 0xc2, 0xd7, 0x61, 0x65, 0xdf, 0x19, 0xb9, 0xde, 0xc0, 0x1a,
	0xbb, 0xf6, 0x09, 0xf5, 0x03, 0x09, 0x95, 0x85, 0x57, 0x96, 0x60, 0xa1, 0x6b, 0x0b, 0x95, 0x70,
	0xf7, 0x63, 0xd8, 0x9c, 0x3b, 0x8a, 0xf5, 0xc4, 0x71, 0x43, 0xea, 0xd3, 0xbe, 0xe5, 0xd3, 0xb1,
	0xeb, 0xf4, 0xc4, 0xfd, 0xbf, 0xd8, 0xbb, 0x7f, 0x7d, 0xce, 0xd0, 0x7b, 0xd2, 0x9c, 0x4c, 0xad,
	0x19, 0xdb, 0xbd, 0xf1, 0xc4, 0x9a, 0xb0, 0x0f, 0x98, 0xaf, 0x62, 0x0a, 0xc9, 0xf7, 0xc6, 0x93,
	0x2e, 0xab, 0x63, 0x04, 0xe9, 0xa7, 0x63, 0xb1, 0x78, 0x29, 0x84, 0x15, 0xd5, 0x9f, 0x2a, 0x50,
	0xd6, 0x06, 0x03, 0x9f, 0x0e, 0xec, 0x50, 0xd2, 0x74, 0x1d, 0x56, 0x04, 0x25, 0x27, 0x96, 0x7c,
	0x58, 0x24, 0xf0, 0x28, 0x02, 0x8f, 0xd4, 0x89, 0x67, 0x45, 0x51, 0xf8, 0x5e, 0x9c, 0x8c, 0xe6,
	0xb6, 0x49, 0xf1, 0x36, 0x2b, 0xb1, 0x36, 0xd9, 0xea, 0x17, 0xe1, 0xf2, 0x7c, 0x16, 0x86, 0x8e,
	0x78, 0x1a, 0x52, 0x22, 0x17, 0xe7, 0x80, 0x6e, 0x3a, 0xa3, 0x57, 0x34, 0xb5, 0x9f, 0x71, 0xbe,
	0x5e, 0xd2, 0xd4, 0x7e, 0xa6, 0xfe, 0x7b, 0x7c, 0x03, 0x10, 0x85, 0x4b, 0xbc, 0x1a, 0x47, 0x79,
	0x41, 0x79, 0x55, 0x5e, 0xa8, 0xc2, 0x42, 0x40, 0xfd, 0x23, 0x67, 0x34, 0x88, 0x2e, 0x99, 0x65,
	0x15, 0x77, 0xe0, 0xeb, 0x12, 0x3b, 0x7d, 0x16, 0x52, 0x7f, 0x64, 0xbb, 0xee, 0x89, 0x25, 0x0e,
	0x2a, 0x46, 0x21, 0xed, 0x5b, 0xd3, 0x67, 0x50, 0x62, 0x45, 0xfe, 0xaa, 0xb0, 0xd6, 0x63, 0x63,
	0x12, 0xdb, 0x9a, 0xf1, 0x03, 0xa9, 0xef, 0x40, 0xd9, 0x97, 0x41, 0x6c, 0x05, 0xcc, 0x3d, 0x32,
	0x1f, 0xad, 0xc4, 0x37, 0xc5, 0x89, 0x08, 0x27, 0x25, 0x7f, 0x26, 0xe0, 0xbf, 0x0b, 0x4b, 0x76,
	0xe4, 0x5b, 0xd9, 0x7a, 0x76, 0xdf, 0x32, 0xeb, 0x79, 0x52, 0xb6, 0x67, 0x23, 0xe1, 0x36, 0x2c,
	0x4a, 0x44, 0xb6, 0xeb, 0xd8, 0xd3, 0x8d, 0xed, 0xa9, 0xb7, 0x65, 0x1a, 0x53, 0x12, 0xf9, 0x0a,
	0x8d, 0x57, 0xd8, 0x7f, 0x74, 0xa5, 0x3b, 0xee, 0xf3, 0x9e, 0xce, 0xf1, 0xee, 0x22, 0xf9, 0x10,
	0x2d, 0x33, 0xfb, 0x10, 0x6d, 0xf6, 0x61, 0x5b, 0xf6, 0xd4, 0xc3, 0x36, 0xf5, 0x0e, 0xac, 0xcc,
	0xe2, 0x97, 0x51, 0xb6, 0x01, 0x59, 0x7e, 0xa1, 0x7e, 0x6a, 0x19, 0x4d, 0xdc, 0x98, 0x13, 0x61,
	0xa0, 0xfe, 0xad, 0x02, 0x95, 0x39, 0xbf, 0x58, 0xf1, 0xff, 0x9b, 0x92, 0x38, 0x1e, 0xfa, 0x79,
	0xc8, 0xf2, 0xab, 0x7d, 0xf9, 0xe6, 0xe4, 0xd2, 0xd9, 0x3f, 0x34, 0x7e, 0x0d, 0x4f, 0x84, 0x15,
	0x4b, 0x84, 0x3c, 0xa0, 0x7a, 0xfc, 0x7c, 0x28, 0xda, 0x21, 0x16, 0x99, 0x4c, 0x1c, 0x19, 0x9d,
	0x3d, 0x70, 0xca, 0xbc, 0xf6, 0xc0, 0x69, 0xf3, 0x8f, 0xd2, 0x50, 0x68, 0x9e, 0x74, 0x9e, 0xba,
	0x7b, 0xae, 0x3d, 0xe0, 0xf7, 0xe4, 0xcd, 0xb6, 0xf9, 0x08, 0x5d, 0xc0, 0xcb, 0x50, 0x32, 0x5a,
	0xa6, 0x65, 0xb0, 0xa5, 0x64, 0xaf, 0xa1, 0xdd, 0x45, 0x0a, 0x5b, 0x6b, 0xda, 0xa4, 0x6e, 0xdd,
	0xd3, 0x1f, 0x09, 0x49, 0x0a, 0x57, 0x60, 0xa9, 0x6b, 0xd4, 0xef, 0x77, 0xf5, 0xa9, 0x30, 0x83,
	0x57, 0x61, 0xb9, 0xd9, 0x6d, 0x98, 0xf5, 0x76, 0x23, 0x21, 0xce, 0xb3, 0x75, 0x69, 0xa7, 0xd1,
	0xda, 0x11, 0x55, 0xc4, 0xfa, 0xef, 0x1a, 0x9d, 0xfa, 0x5d, 0x43, 0xdf, 0x15, 0xa2, 0x75, 0x26,
	0x7a, 0xac, 0x93, 0xd6, 0x5e, 0x3d, 0x1a, 0xf2, 0x0e, 0x46, 0x50, 0xdc, 0xa9, 0x1b, 0x1a, 0x91,
	0xbd, 0x3c, 0x57, 0x70, 0x19, 0x0a, 0xba, 0xd1, 0x6d, 0xca, 0x7a, 0x0a, 0x57, 0xa1, 0xa2, 0x75,
	0xcd, 0x96, 0x55, 0x37, 0x6a, 0x44, 0x6f, 0xea, 0x86, 0x29, 0x35, 0x19, 0x5c, 0x81, 0xb2, 0x59,
	0x6f, 0xea, 0x1d, 0x53, 0x6b, 0xb6, 0xa5, 0x90, 0xcd, 0x22, 0xdf, 0xd1, 0x23, 0x1b, 0x84, 0xd7,
	0x60, 0xd5, 0x68, 0x59, 0xf2, 0x79, 0x92, 0xf5, 0x40, 0x6b, 0x74, 0x75, 0xa9, 0x5b, 0xc7, 0x97,
	0x00, 0xb7, 0x0c, 0xab, 0xdb, 0xde, 0xd5, 0x4c, 0xdd, 0x32, 0x5a, 0x0f, 0xa5, 0xe2, 0x0e, 0x2e,
	0x43, 0x7e, 0x3a, 0x83, 0xe7, 0x8c, 0x85, 0x52, 0x5b, 0x23, 0xe6, 0x14, 0xec, 0xf3, 0xe7, 0x8c,
	0x2c, 0xb8, 0x4b, 0x5a, 0xdd, 0xf6, 0xd4, 0x6c, 0x19, 0x8a, 0x92, 0x2c, 0x29, 0xca, 0x30, 0xd1,
	0x4e, 0xdd, 0xa8, 0xc5, 0xf3, 0x7b, 0x9e, 0x5f, 0x4b, 0x21, 0x65, 0xf3, 0x10, 0x32, 0xdc, 0x1d,
	0x79, 0xc8, 0x18, 0x2d, 0x43, 0x47, 0x17, 0xf0, 0x12, 0x40, 0xbd, 0x53, 0x37, 0x4c, 0xfd, 0x2e,
	0xd1, 0x1a, 0x0c, 0x36, 0x17, 0x44, 0x04, 0x32, 0xb4, 0x8b, 0xb0, 0x50, 0xef, 0xec, 0x35, 0x5a,
	0x9a, 0x29, 0x61, 0xd6, 0x3b, 0xf7, 0xbb, 0x2d, 0x93, 0x29, 0x11, 0x2e, 0x42, 0xae, 0xde, 0x31,
	0xf5, 0xef, 0x9b, 0x0c, 0x17, 0xd7, 0x09, 0x56, 0xd1, 0xf3, 0x3b, 0x9b, 0x3f, 0x49, 0x43, 0x86,
	0x3f, 0x2e, 0x2d, 0x41, 0x81, 0x7b, 0xdb, 0x7c, 0xd4, 0x66, 0x43, 0x16, 0x20, 0x53, 0x37, 0xcc,
	0xdb, 0xe8, 0x57, 0x53, 0x18, 0x20, 0xdb, 0xe5, 0xe5, 0x5f, 0xcb, 0xb1, 0x72, 0xdd, 0x30, 0x3f,
	0xba, 0x85, 0x7e, 0x98, 0x62, 0xdd, 0x76, 0x45, 0xe5, 0xd7, 0x23, 0xc5, 0xf6, 0x4d, 0xf4, 0xa3,
	0x58, 0xb1, 0x7d, 0x13, 0xfd, 0x46, 0xa4, 0xb8, 0xb1, 0x8d, 0x7e, 0x33, 0x56, 0xdc, 0xd8, 0x46,
	0xbf, 0x15, 0x29, 0x6e, 0xdd, 0x44, 0xbf, 0x1d, 0x2b, 0x6e, 0xdd, 0x44, 0xbf, 0x93, 0x63, 0x58,
	0x38, 0x92, 0x1b, 0xdb, 0xe8, 0x77, 0xf3, 0x71, 0xed, 0xd6, 0x4d, 0xf4, 0x7b, 0x79, 0xe6, 0xff,
	0xd8, 0xab, 0xe8, 0xf7, 0x11, 0x9b, 0x26, 0x73, 0x10, 0xfa, 0x03, 0x5e, 0x64, 0x2a, 0xf4, 0x63,
	0xc4, 0x30, 0x32, 0x29, 0xaf, 0x7e, 0xca, 0x35, 0x8f, 0x74, 0x8d, 0xa0, 0x3f, 0xcc, 0x89, 0xd7,
	0x68, 0xb5, 0x7a, 0x53, 0x6b, 0x20, 0xcc, 0x5b, 0x30, 0x56, 0xfe, 0xf8, 0x3a, 0x2b, 0xb2, 0xf0,
	0x44, 0x7f, 0xd2, 0x66, 0x03, 0x3e, 0xd0, 0x48, 0xed, 0x13, 0x8d, 0xa0, 0x3f, 0xbd, 0xce, 0x06,
	0x7c, 0xa0, 0x11, 0xc9, 0xd7, 0x9f, 0xb5, 0x99, 0x21, 0x57, 0xbd, 0xb8, 0xce, 0x26, 0x2d, 0xe5,
	0x7f, 0xde, 0xc6, 0x79, 0x48, 0xef, 0xd4, 0x4d, 0xf4, 0x13, 0x3e, 0x1a, 0x0b, 0x51, 0xf4, 0x17,
	0x88, 0x09, 0x3b, 0xba, 0x89, 0xfe, 0x92, 0x09, 0xb3, 0x66, 0xb7, 0xdd, 0xd0, 0xd1, 0x7b, 0x6c,
	0x72, 0x77, 0xf5, 0x56, 0x53, 0x37, 0xc9, 0x23, 0xf4, 0x57, 0xdc, 0xfc, 0x7b, 0x9d, 0x96, 0x81,
	0x3e, 0x43, 0xb8, 0x0c, 0xa0, 0x7f, 0xbf, 0x4d, 0xf4, 0x4e, 0xa7, 0xde, 0x32, 0xd0, 0x87, 0x9b,
	0x7b, 0x80, 0x4e, 0xa7, 0x03, 0x06, 0xa0, 0x6b, 0xdc, 0x33, 0x5a, 0x0f, 0x0d, 0x74, 0x81, 0x55,
	0xda, 0x44, 0x6f, 0x6b, 0x44, 0x47, 0x0a, 0x06, 0xc8, 0x89, 0xb7, 0x72, 0x28, 0x85, 0x17, 0x21,
	0x4f, 0x5a, 0x8d, 0xc6, 0x8e, 0x56, 0xbb, 0x87, 0xd2, 0x3b, 0xdf, 0x86, 0x25, 0xc7, 0xdb, 0x3a,
	0x72, 0x42, 0x1a, 0x04, 0xe2, 0xf9, 0xf2, 0x63, 0x55, 0xd6, 0x1c, 0xef, 0x9a, 0x28, 0x5d, 0x1b,
	0x78, 0xd7, 0x8e, 0xc2, 0x6b, 0x5c, 0x7b, 0x8d, 0x67, 0x8c, 0xfd, 0x1c, 0xaf, 0xdc, 0xf8, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xf5, 0x98, 0x5c, 0x1c, 0x2d, 0x00, 0x00,
}
